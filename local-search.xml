<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python入门-1.3 数据类型</title>
    <link href="/2020/12/08/python%E5%85%A5%E9%97%A8/1.3.%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2020/12/08/python%E5%85%A5%E9%97%A8/1.3.%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3. 数据类型"></a>3. 数据类型</h1><p><a name="1G0fw"></a></p><h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><ul><li>Python3 中有六个标准的数据类型：<ul><li>Number（数字）<ul><li>int</li><li>bool</li><li>float</li><li>complex（复数）</li></ul></li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Sets（集合）</li><li>Dictionary（字典）</li></ul></li></ul><p><br />Python3 的六个标准数据类型中：</p><ul><li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组)；</li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。<blockquote><p><code>可变类型定义</code>:变量值改变但是变量地址不会改变<br><code>不可变类型定义</code>:变量值改变，变量地址必须改变</p></blockquote></li></ul><pre><code class="hljs python"><span class="hljs-comment"># 可变类型</span>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]print(<span class="hljs-built_in">id</span>(list1)) <span class="hljs-comment">#list1的内存地址</span>list2 = list1print(<span class="hljs-built_in">id</span>(list2)) <span class="hljs-comment">#list2的内存地址</span>list1.remove(<span class="hljs-number">1</span>)print(<span class="hljs-built_in">id</span>(list1), <span class="hljs-built_in">id</span>(list2)) <span class="hljs-comment">#修改值后的list1，list2的内存地址</span>print(list2)<span class="hljs-comment"># 不可变类型</span>str1 = <span class="hljs-string">&quot;点赞哦&quot;</span>str2 = str1print(<span class="hljs-built_in">id</span>(str1), <span class="hljs-built_in">id</span>(str2))str1 = <span class="hljs-string">&quot;这次一定&quot;</span>print(<span class="hljs-built_in">id</span>(str1), <span class="hljs-built_in">id</span>(str2))print(str1, str2)</code></pre><br /><a name="S8pWQ"></a>## 类型检查> 如何知道一个变量的类型呢？<ul><li>内置的 type() 函数可以用来查询变量所指的对象类型。（Python是面向对象的语言）</li><li>此外还可以用 isinstance 来判断<pre><code class="hljs python"><span class="hljs-comment"># 使用type()获取类型</span>a, b, c, d = <span class="hljs-number">20</span>, <span class="hljs-number">5.5</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">4</span>+<span class="hljs-number">3j</span>e = <span class="hljs-string">&quot;Demo&quot;</span>print(<span class="hljs-built_in">type</span>(a), <span class="hljs-built_in">type</span>(b), <span class="hljs-built_in">type</span>(c), <span class="hljs-built_in">type</span>(d), <span class="hljs-built_in">type</span>(e))<span class="hljs-comment"># 输出</span><span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt; &lt;class &#x27;float&#x27;&gt; &lt;class &#x27;bool&#x27;&gt; &lt;class &#x27;complex&#x27;&gt; &lt;class &#x27;str&#x27;&gt;</span><span class="hljs-comment"># isinstance()判断类型</span>a = <span class="hljs-number">111</span>print(<span class="hljs-built_in">isinstance</span>(a, <span class="hljs-built_in">int</span>))<span class="hljs-comment"># 输出</span><span class="hljs-comment"># True</span></code></pre></li></ul><p><a name="cSSdc"></a></p><h5 id="isinstance-和-type-的区别"><a href="#isinstance-和-type-的区别" class="headerlink" title="isinstance 和 type 的区别"></a>isinstance 和 type 的区别</h5><ul><li>type()不会认为子类是一种父类类型。</li><li>isinstance()会认为子类是一种父类类型。<pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span>    <span class="hljs-keyword">pass</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span>    <span class="hljs-keyword">pass</span>ans_1 = <span class="hljs-built_in">isinstance</span>(A(), A)  <span class="hljs-comment"># returns True</span>ans_2 = <span class="hljs-built_in">type</span>(A()) == A      <span class="hljs-comment"># returns True</span>ans_3 = <span class="hljs-built_in">isinstance</span>(B(), A)    <span class="hljs-comment"># returns True</span>ans_4 = <span class="hljs-built_in">type</span>(B()) == A        <span class="hljs-comment"># returns False</span>print(ans_1, ans_2, ans_3, ans_4)<span class="hljs-comment"># 输出</span><span class="hljs-comment"># True True True False</span></code></pre></li></ul><p><a name="cV1WB"></a></p><h2 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h2><ul><li>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</li><li>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值<table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x [,base])</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d 必须是一个序列 (key,value)元组。</td></tr><tr><td>frozenset(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>unichr(x)</td><td>将一个整数转换为Unicode字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table></li></ul><p><a name="8ba7f5f9"></a></p><h3 id="数据类型转换分类"><a href="#数据类型转换分类" class="headerlink" title="数据类型转换分类"></a>数据类型转换分类</h3><ul><li>数据类型转换一共分为2类：自动数据类型转换(隐式转换)和强制数据类型转换(显示转换)<br><a name="xDZik"></a></li></ul><h4 id="自动数据类型转换-隐式转换"><a href="#自动数据类型转换-隐式转换" class="headerlink" title="自动数据类型转换/隐式转换"></a>自动数据类型转换/隐式转换</h4><ul><li>自动类型转换是程序根据运算要求进行的转换，不需要人工干预 <ul><li>1.自动类型转换不需要人工干预 </li><li>2.自动类型转换多发生在运算或者判断过程中 </li><li>3.转化时向着更加精确的类型转换<pre><code class="hljs python">a = <span class="hljs-number">1.0</span>b = <span class="hljs-number">1</span>c = a + bprint(<span class="hljs-built_in">type</span>(a), <span class="hljs-built_in">type</span>(b), <span class="hljs-built_in">type</span>(c)</code></pre><a name="dR9zy"></a></li></ul></li></ul><h4 id="强制类型转换-显示转换"><a href="#强制类型转换-显示转换" class="headerlink" title="强制类型转换/显示转换"></a>强制类型转换/显示转换</h4><ul><li><p>根据程序需要，由编写程序人员人为改变数据类型的方式就是强制数据类型转换。<br /></p></li><li><p>int() 将其他类型转化为整型<br /></p><pre><code class="hljs yaml"><span class="hljs-number">1</span><span class="hljs-string">.数字整型转化之后，还是原来的味道</span><span class="hljs-number">2</span><span class="hljs-string">.浮点类型转化之后，舍去小数部分</span><span class="hljs-number">3</span><span class="hljs-string">.布尔值转化之后</span> <span class="hljs-literal">True</span> <span class="hljs-string">-&gt;</span> <span class="hljs-number">1</span> <span class="hljs-literal">False</span><span class="hljs-string">-&gt;0</span><span class="hljs-number">4</span><span class="hljs-string">.字符串转换，仅纯整型字符串可以转化（浮点型或者带有其他字符都不可以转化）</span><span class="hljs-number">5</span><span class="hljs-string">.复数不可以转换</span></code></pre></li><li><p>float() 将其他类型转化为浮点型</p><pre><code class="hljs yaml"><span class="hljs-number">1</span><span class="hljs-string">.整型转换之后变为浮点型，后面+.0</span><span class="hljs-number">2</span><span class="hljs-string">.浮点数不需要转化，转化也不会变化</span><span class="hljs-number">3</span><span class="hljs-string">.布尔值转化</span> <span class="hljs-literal">True</span><span class="hljs-string">-&gt;1.0</span>  <span class="hljs-literal">False</span> <span class="hljs-string">-&gt;0.0</span><span class="hljs-number">4</span><span class="hljs-string">.字符串，纯整型字符串和纯浮点型字符串可以转换，其他都不可以</span></code></pre></li><li><p>complex() 将其他数据转化为复数</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>整型转换之后变为 （整型+<span class="hljs-number">0</span>j）<span class="hljs-number">2.</span>浮点型转换之后变为(浮点型 + <span class="hljs-number">0</span>j)<span class="hljs-number">3.</span>布尔值转化之后 True-&gt;（<span class="hljs-number">1</span>+<span class="hljs-number">0</span>j） False(<span class="hljs-number">0</span>j)<span class="hljs-number">4.</span>字符串，纯整型和浮点型字符串可以转化，其他都不行<span class="hljs-number">5.</span>复数，无需转换</code></pre></li><li><p>bool() 将其他类型转化为布尔值</p><pre><code class="hljs yaml"><span class="hljs-comment">#下面转化为布尔值false的情况</span>    <span class="hljs-number">1</span><span class="hljs-string">.整型</span>   <span class="hljs-number">0</span>    <span class="hljs-number">2</span><span class="hljs-string">.浮点型</span>  <span class="hljs-number">0.0</span>    <span class="hljs-number">3</span><span class="hljs-string">.复数</span>  <span class="hljs-number">0</span><span class="hljs-string">+0j</span>    <span class="hljs-number">4</span><span class="hljs-string">.布尔</span>  <span class="hljs-literal">False</span>    <span class="hljs-number">5</span><span class="hljs-string">.字符串</span>  <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">空字符串</span>    <span class="hljs-number">6</span><span class="hljs-string">.列表</span>   [] <span class="hljs-string">空列表</span>    <span class="hljs-number">7</span><span class="hljs-string">.元组</span>   <span class="hljs-string">()空元组</span>    <span class="hljs-number">8</span><span class="hljs-string">.字典</span>   &#123;&#125; <span class="hljs-string">空字典</span>    <span class="hljs-number">9</span><span class="hljs-string">.集合</span>   <span class="hljs-string">set()</span> <span class="hljs-string">空集合</span></code></pre></li><li><p>str() 将其他类型转化为字符串</p><ul><li>所有转换均改变类型为字符串，表示方式依旧不变</li></ul></li><li><p>list() 将其他类型转化为列表类型</p><ul><li>在python中有5中可迭代序列，可以互相转换，他们分别是：</li><li>字符串，列表，元组，字典，集合<pre><code class="hljs python">var = (<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王老五&#x27;</span>)newvar = <span class="hljs-built_in">list</span>(var)newvar的值为 [<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王老五&#x27;</span>]</code></pre></li></ul></li><li><p><code>注意：</code></p><ul><li>1.字符串转换时每个字符变成列表中的一个值</li><li>2.字典类型转换时，仅将字典的键部分转换成列表，忽略值部分</li></ul></li><li><p>tuple() 将其他类型转化为元组类型<br /></p><pre><code class="hljs python">var = &#123;<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王老五&#x27;</span>&#125;newvar = <span class="hljs-built_in">tuple</span>(var)newvar的值为 (<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王老五&#x27;</span>)</code></pre></li><li><p><code>注意：</code></p><ul><li>1.字符串转换时每个字符变成元组中的一个值</li><li>2.字典类型转换时，仅将字典的键部分转换成元组，忽略值部分</li></ul></li><li><p>set（） 将其他类型转化为集合类型</p><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> = [<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王老五&#x27;</span>]<span class="hljs-keyword">new</span><span class="hljs-type">var</span> = <span class="hljs-keyword">set</span>(<span class="hljs-keyword">var</span>)<span class="hljs-keyword">new</span><span class="hljs-type">var</span>的值为 &#123;<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王老五&#x27;</span>&#125;  <span class="hljs-meta">#值的顺序不定</span></code></pre></li><li><p><code>注意：</code></p><ul><li>1.字符串转换时每个字符变成集合中的一个值</li><li>2.字典类型转换时，仅将字典的键部分转换集合，忽略值部分</li></ul></li><li><p>dict() 将其他类型转换为字典类型</p></li><li><p>其他类型转化为字典时需要按照指定的格式才可以转化：（列表和元组的组合可以）</p><pre><code class="hljs scheme">[[<span class="hljs-symbol">&#x27;cat</span>&#x27;, <span class="hljs-symbol">&#x27;黑猫警长</span>&#x27;], [<span class="hljs-symbol">&#x27;mouse</span>&#x27;, <span class="hljs-symbol">&#x27;一只耳</span>&#x27;], [<span class="hljs-symbol">&#x27;next</span>&#x27;, <span class="hljs-symbol">&#x27;请看夏季</span>&#x27;]][(<span class="hljs-symbol">&#x27;cat</span>&#x27;, <span class="hljs-symbol">&#x27;黑猫警长</span>&#x27;), （<span class="hljs-symbol">&#x27;mouse</span>&#x27;, <span class="hljs-symbol">&#x27;一只耳</span><span class="hljs-symbol">&#x27;）</span>, （<span class="hljs-symbol">&#x27;next</span>&#x27;, <span class="hljs-symbol">&#x27;请看夏季</span><span class="hljs-symbol">&#x27;）</span>]</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门系列-写在前面</title>
    <link href="/2020/12/08/python%E5%85%A5%E9%97%A8/Python%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/"/>
    <url>/2020/12/08/python%E5%85%A5%E9%97%A8/Python%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p><img src="http://oss.diorspo.cn/Fpdl2F28wgb-5Q6s9EkFs8mC9RMy">  </p><p>上上周，由黄老师介绍了一个去企业讲授Python入门课程的活，这个活是一个培训机构找过来的，他们专门给各类政府企业单位的人提供各种各样的IT培训课程，讲师都是从业内找一些经验丰富的从业人员来签约授课，黄老师以前给他们讲过几次课，所以找过来。这次可能是因为黄老师看不上这点小钱，也可能是知道了我“穷”的现状，将这个活计推给了我。</p><p>讲道理，虽然我一直有过搞编程培训班的想法，但我想的是搞少儿编程，还真没想过给企业里的工程师讲课，毕竟我自己也是个小菜鸡，万一别人来一句“配钥匙5元一把，您配吗？”，岂不是很尴尬？</p><p><img src="http://oss.diorspo.cn/FvmqczbAavwvOUzmQL07KthhhnHO"></p><p>不过黄老师一直给我鼓气说没问题的，受众是一群没有多少软件研发经验的工程师，他们平时主要接触的都是电力设备的运维，极少数了解一些C++相关的知识，并没有实际编码的经验。因此，我也就硬着头皮上了，花了一周的时间自己复习了一下Python的基础知识，并且准备了一份讲义，毕竟不能给黄老师丢人。   </p><p>准备时间只有一周，做PPT太耗费时间，实习期间习惯了使用语雀写文档，语雀的演示模式也挺好用，在和培训机构以及客户沟通之后，同意了使用语雀文档进行教学。所以我就边复习、边学习、边写文档，完成了一份Python入门的讲义。  </p><p><img src="http://oss.diorspo.cn/Fu5CO9HFTFtZ-w_Fw3vZVFJAk6iI">  </p><p>讲义准备毕竟也花了不少精力，讲课效果也还不错，作为一次性用品似乎有点浪费，所以想到干脆也放到博客来，因此，博客的计划中先得插播一些Python入门的文章。   </p><p>由于是从语雀导出Markdown移植过来的，格式上或许有一些没有仔细核对的地方，请读者见谅～ 另外，讲义是针对入门学习者准备的，内容比较基础，大佬勿喷哦⚠️   </p><p>后面会根据讲义的章节顺序更新到博客上来，目录如下，有兴趣的朋友也可以直接阅读<a href="https://www.yuque.com/books/share/dc8ddc73-c071-404d-b58d-bcbc18933e02#">语雀文档</a>。  </p><p><img src="http://oss.diorspo.cn/Fi0J1mwFjtgFzNY1PD6jQ52gITYz"></p>]]></content>
    
    
    <categories>
      
      <category>默认</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门-1.2 基础语法入门</title>
    <link href="/2020/12/08/python%E5%85%A5%E9%97%A8/1.2.%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <url>/2020/12/08/python%E5%85%A5%E9%97%A8/1.2.%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-2-基础语法入门"><a href="#1-2-基础语法入门" class="headerlink" title="1.2 基础语法入门"></a>1.2 基础语法入门</h1><p><a name="Tbm4p"></a></p><h2 id="明确几个基本概念"><a href="#明确几个基本概念" class="headerlink" title="明确几个基本概念"></a>明确几个基本概念</h2><p><a name="Qe41y"></a></p><h5 id="（1）表达式"><a href="#（1）表达式" class="headerlink" title="（1）表达式"></a>（1）表达式</h5><p>        表达式就是一个类似于数学公式的东西<br />        比如：10 + 5   8 - 4<br />        表达式一般仅仅用了计算一些结果，不会对程序产生实质性的影响<br />        如果在交互模式中输入一个表达式，解释器会自动将表达式的结果输出<br><a name="6pVB7"></a></p><h5 id="（2）语句"><a href="#（2）语句" class="headerlink" title="（2）语句"></a>（2）语句</h5><p>        在程序中语句一般需要完成某种功能，比如打印信息、获取信息、为变量赋值。<br />        比如：</p><pre><code class="hljs python">print()<span class="hljs-built_in">input</span>()a = <span class="hljs-number">10</span></code></pre><p>        语句的执行一般会对程序产生一定的影响<br />        在交互模式中不一定会输出语句的执行结果  <br><a name="ZsTfB"></a></p><h5 id="（3）程序（program）"><a href="#（3）程序（program）" class="headerlink" title="（3）程序（program）"></a>（3）程序（program）</h5><p>        程序就是由一条一条的语句和一条一条的表达式构成的。<br><a name="DsnRP"></a></p><h5 id="（4）函数（function）"><a href="#（4）函数（function）" class="headerlink" title="（4）函数（function）"></a>（4）函数（function）</h5><p>        函数就是一种语句，函数专门用来完成特定的功能<br />        函数长的形如：xxx()          <br />        函数的分类：<br />            内置函数<br />                - 由Python解释器提供的函数，可以在Python中直接使用<br />            自定义函数    <br />                - 由程序员自主的创建的函数<br />        当我们需要完成某个功能时，就可以去调用内置函数，或者自定义函数<br />        函数的两个要素：<br />            参数<br />                - ()中的内容就是函数的参数<br />                - 函数中可以没有参数，也可以有多个参数，多个参数之间使用,隔开<br />            返回值        <br />                - 返回值是函数的返回结果，不是所有的函数都有返回值<br /></p><p><a name="Hn2ZT"></a></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><a name="iGvjC"></a></p><h3 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a>第一个Python程序</h3><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: cp-1252 -*-</span><span class="hljs-comment"># Python文件首行可以指定编码格式，Python3默认是utf-8</span>print(<span class="hljs-string">&quot;Hello World&quot;</span>) <span class="hljs-comment"># 打印Hello World</span>print(<span class="hljs-string">&quot;Hello, everyone!\n \</span><span class="hljs-string">I am so glad to introduce Python to you!&quot;</span>)a = <span class="hljs-literal">True</span><span class="hljs-keyword">if</span> a:print(<span class="hljs-string">&quot;True&quot;</span>)<span class="hljs-keyword">else</span>:print(<span class="hljs-string">&quot;False&quot;</span>)</code></pre><ul><li>在Python中严格区分大小写</li><li>Python中的每一行就是一条语句，每条语句以换行结束</li><li>Python中每一行语句不要过长（规范中建议每行不要超过80个字符）</li><li>一条语句可以分多行编写，多行编写时语句后边以”&quot;结尾  </li><li>Python是缩进严格的语言，以缩进来表示代码块，所以在Python中不要随便写缩进  </li><li>在Python中使用#来表示注释，”#”后的内容都属于注释，注释的内容将会被解释器所忽略</li></ul><p><a name="fLhD9"></a></p><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p><a name="LhHML"></a></p><h5 id="input-输入："><a href="#input-输入：" class="headerlink" title="input()输入："></a>input()输入：</h5><ul><li><p>input()的小括号中放入的是，提示信息，用来在获取数据之前给用户的一个简单提示</p></li><li><p>input()在从键盘获取了数据以后，会存放到等号右边的变量中</p></li><li><p>input()会把用户输入的任何值都作为字符串来对待</p></li><li><p>注意：在python2中还有一个raw_input()输入，但到python3中没有了</p><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入：&quot;</span>);<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;你输入的内容是: &quot;</span>, <span class="hljs-built_in">str</span>)</code></pre><p><a name="NtZDW"></a></p><h5 id="print-输出："><a href="#print-输出：" class="headerlink" title="print()输出："></a>print()输出：</h5></li><li><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=””</p><pre><code class="hljs python">x=<span class="hljs-string">&quot;a&quot;</span>y=<span class="hljs-string">&quot;b&quot;</span><span class="hljs-comment"># 换行输出</span>print( x )print( y )print(<span class="hljs-string">&#x27;---------&#x27;</span>)<span class="hljs-comment"># 不换行输出</span>print( x, end=<span class="hljs-string">&quot; &quot;</span> )print( y, end=<span class="hljs-string">&quot; &quot;</span> )print()<span class="hljs-comment"># 同时输出多个变量</span>print(x,y)</code></pre><p><a name="yijxN"></a></p><h5 id="format格式化函数："><a href="#format格式化函数：" class="headerlink" title="format格式化函数："></a>format格式化函数：</h5></li><li><p>格式化字符串的函数 str.format()，它增强了字符串格式化的功能</p></li><li><p>基本语法是通过 {} 和 : 来代替以前的 % 。</p><pre><code class="hljs python"><span class="hljs-comment"># 不设置指定位置，按默认顺序</span>template = <span class="hljs-string">&quot;name: &#123;&#125;, age: &#123;&#125;&quot;</span>print(template.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;18&quot;</span>))<span class="hljs-comment"># 设置指定位置</span>template = <span class="hljs-string">&quot;name: &#123;0&#125;, age: &#123;1&#125; \nWelcome, &#123;0&#125;&quot;</span>print(template.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>))<span class="hljs-comment"># 设置指定参数名</span>template = <span class="hljs-string">&quot;name: &#123;name&#125;, age: &#123;age&#125;&quot;</span>print(template.<span class="hljs-built_in">format</span>(name=<span class="hljs-string">&quot;John&quot;</span>, age=<span class="hljs-string">&quot;18&quot;</span>))<span class="hljs-comment"># 通过字典设置参数</span>template = <span class="hljs-string">&quot;name: &#123;name&#125;, age: &#123;age&#125;&quot;</span>john = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;18&quot;</span>&#125;print(template.<span class="hljs-built_in">format</span>(**john)) <span class="hljs-comment"># **表示接收的参数作为字典来处理，*表示接收的参数作为元组来处理</span><span class="hljs-comment"># 通过列表索引设置参数</span>my_list = [<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>]template = <span class="hljs-string">&quot;name: &#123;0[0]&#125;, age: &#123;0[1]&#125;&quot;</span> <span class="hljs-comment"># 第一个数字0，用于表示format参数，可以传入多个列表参数，中括号中表示数组下标</span>print(template.<span class="hljs-built_in">format</span>(my_list))<span class="hljs-comment"># 练习：尝试混用上述方式~</span><span class="hljs-comment"># 数字格式化</span>print(<span class="hljs-string">&quot;PI: &#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3.1415926</span>))</code></pre></li></ul><table><thead><tr><th>数字</th><th>格式</th><th>输出</th><th>描述</th></tr></thead><tbody><tr><td>3.1415926</td><td>{:.2f}</td><td>3.14</td><td>保留小数点后两位</td></tr><tr><td>3.1415926</td><td>{:+.2f}</td><td>+3.14</td><td>带符号保留小数点后两位</td></tr><tr><td>-1</td><td>{:+.2f}</td><td>-1.00</td><td>带符号保留小数点后两位</td></tr><tr><td>2.71828</td><td>{:.0f}</td><td>3</td><td>不带小数</td></tr><tr><td>5</td><td>{:0&gt;2d}</td><td>05</td><td>数字补零 (填充左边, 宽度为2)</td></tr><tr><td>5</td><td>{:x&lt;4d}</td><td>5xxx</td><td>数字补x (填充右边, 宽度为4)</td></tr><tr><td>10</td><td>{:x&lt;4d}</td><td>10xx</td><td>数字补x (填充右边, 宽度为4)</td></tr><tr><td>1000000</td><td>{:,}</td><td>1,000,000</td><td>以逗号分隔的数字格式</td></tr><tr><td>0.25</td><td>{:.2%}</td><td>25.00%</td><td>百分比格式</td></tr><tr><td>1000000000</td><td>{:.2e}</td><td>1.00e+09</td><td>指数记法</td></tr><tr><td>13</td><td>{:10d}</td><td>13</td><td>右对齐 (默认, 宽度为10)</td></tr><tr><td>13</td><td>{:&lt;10d}</td><td>13</td><td>左对齐 (宽度为10)</td></tr><tr><td>13</td><td>{:^10d}</td><td>13</td><td>中间对齐 (宽度为10)</td></tr><tr><td>11</td><td>‘{:b}’.format(11)<br />‘{:d}’.format(11)<br />‘{:o}’.format(11)<br />‘{:x}’.format(11)<br />‘{:#x}’.format(11)<br />‘{:#X}’.format(11)</td><td>1011<br />11<br />13<br />b<br />0xb<br />0XB</td><td>进制</td></tr></tbody></table><p><a name="ee656aa1"></a></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>python中单行注释采用 # 开头。<pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><span class="hljs-comment"># 文件名：test.py</span><span class="hljs-comment"># 第一个注释</span>print(<span class="hljs-string">&quot;Hello, Python!&quot;</span>);  <span class="hljs-comment"># 第二个注释</span></code></pre>输出结果：<pre><code class="hljs python">Hello, Python!</code></pre></li></ul><p><br />注释可以在语句或表达式行末：</p><pre><code class="hljs python">name = <span class="hljs-string">&quot;Madisetti&quot;</span> <span class="hljs-comment"># 这是一个注释</span></code></pre><ul><li><p>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)。</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><span class="hljs-comment"># 文件名：test.py</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">这是多行注释，使用单引号。</span><span class="hljs-string">这是多行注释，使用单引号。</span><span class="hljs-string">这是多行注释，使用单引号。</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">这是多行注释，使用双引号。</span><span class="hljs-string">这是多行注释，使用双引号。</span><span class="hljs-string">这是多行注释，使用双引号。</span><span class="hljs-string">&quot;&quot;&quot;</span></code></pre><p><a name="XLGj5"></a></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><a name="qClRL"></a></p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3></li><li><p>在Python里, <code>标识符: 由字母、数字、下划线组成,但不能以数字开头</code>。  <br /></p></li><li><p>Python 中的标识符是区分大小写的。<br /></p></li><li><p>特殊标识符：</p><ul><li>以下划线开头的标识符是有特殊意义的。以单下划线开头 <code>_foo</code> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 <code>from xxx import *</code> 而导入；<br /></li><li>以双下划线开头的 <code>__foo</code> 代表类的私有成员；以双下划线开头和结尾的 <code>__foo__</code> 代表 Python 里特殊方法专用的标识，如 <code>__init__()</code> 代表类的构造函数。<br /></li></ul></li><li><p>python保留字： 保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> keyword<span class="hljs-meta">&gt;&gt;&gt; </span>keyword.kwlist[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;as&#x27;</span>, <span class="hljs-string">&#x27;assert&#x27;</span>, <span class="hljs-string">&#x27;break&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;continue&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;del&#x27;</span>, <span class="hljs-string">&#x27;elif&#x27;</span>, <span class="hljs-string">&#x27;else&#x27;</span>, <span class="hljs-string">&#x27;except&#x27;</span>, <span class="hljs-string">&#x27;finally&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;lambda&#x27;</span>, <span class="hljs-string">&#x27;nonlocal&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;pass&#x27;</span>, <span class="hljs-string">&#x27;raise&#x27;</span>, <span class="hljs-string">&#x27;if&#x27;</span>,<span class="hljs-string">&#x27;return&#x27;</span>,<span class="hljs-string">&#x27;try&#x27;</span>, <span class="hljs-string">&#x27;while&#x27;</span>, <span class="hljs-string">&#x27;with&#x27;</span>, <span class="hljs-string">&#x27;yield&#x27;</span>]</code></pre></li></ul><p><a name="K7Zco"></a></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</li><li>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。<br /></li><li>等号（=）用来给变量赋值。<br /></li><li>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：<br /><pre><code class="hljs python">counter = <span class="hljs-number">100</span>          <span class="hljs-comment"># 整型变量</span>miles   = <span class="hljs-number">1000.0</span>       <span class="hljs-comment"># 浮点型变量</span>name    = <span class="hljs-string">&quot;demo&quot;</span>     <span class="hljs-comment"># 字符串</span>print(counter)print(miles)print(name)</code></pre>执行以上程序会输出如下结果：<pre><code class="hljs angelscript"><span class="hljs-number">100</span><span class="hljs-number">1000.0</span>demo</code></pre></li></ul><blockquote><p>TIPS:</p><ol><li>变量命名应既简短又具有描述性。例如，name比n好，student_name比s_n好。</li><li>慎用小写字母l和大写字母O，它们很容易被看错成数字1和0</li></ol></blockquote><ul><li><p>Python允许你同时为多个变量赋值。例如：</p><pre><code class="hljs python">a = b = c = <span class="hljs-number">1</span></code></pre></li><li><p>以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。</p></li></ul><ul><li><p>您也可以为多个对象指定多个变量。例如：</p><pre><code class="hljs python">a, b, c = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;demo&quot;</span></code></pre></li><li><p>以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 “demo” 分配给变量 c。</p></li></ul><br /><p><a name="avDhA"></a></p><h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><ul><li><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号({})。</p></li><li><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：</p><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)</code></pre></li><li><p>以下代码最后一行语句缩进数的空格数不一致，会导致运行错误：</p><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)  <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)    <span class="hljs-comment"># 缩进不一致，会导致运行错误</span></code></pre></li><li><p>以上程序由于缩进不一致，执行后会出现类似以下错误：</p><pre><code class="hljs bash">File <span class="hljs-string">&quot;test.py&quot;</span>, line 6    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)    <span class="hljs-comment"># 缩进不一致，会导致运行错误</span>                                      ^IndentationError: unindent does not match any outer indentation level</code></pre></li></ul><p><a name="Y7deq"></a></p><h5 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h5><ul><li>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：<pre><code class="hljs python">total = item_one + \        item_two + \        item_three</code></pre></li></ul><ul><li>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：<pre><code class="hljs python">total = [<span class="hljs-string">&#x27;item_one&#x27;</span>, <span class="hljs-string">&#x27;item_two&#x27;</span>, <span class="hljs-string">&#x27;item_three&#x27;</span>,        <span class="hljs-string">&#x27;item_four&#x27;</span>, <span class="hljs-string">&#x27;item_five&#x27;</span>]</code></pre><a name="xXVLq"></a><br><a name="E9gRm"></a></li></ul><h5 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h5><ul><li>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br /></li><li>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。<br /></li><li>记住：空行也是程序代码的一部分。<br /></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门-1.1Python简介与环境搭建</title>
    <link href="/2020/12/08/python%E5%85%A5%E9%97%A8/1.1.Python%E7%AE%80%E4%BB%8B%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/12/08/python%E5%85%A5%E9%97%A8/1.1.Python%E7%AE%80%E4%BB%8B%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="1-1-Python简介与环境搭建"><a href="#1-1-Python简介与环境搭建" class="headerlink" title="1.1 Python简介与环境搭建"></a>1.1 Python简介与环境搭建</h1><p><a name="zEV1U"></a></p><h2 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h2><p><strong>Python</strong>是一种广泛使用的<a href="https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80"><strong>解释型</strong></a><strong>、高级编程、通用型编程语言</strong>功能，能够自动管理内存使用，并且其本身拥有一个巨大而广泛的标准库。<br /><br />Python由<a href="https://zh.wikipedia.org/wiki/%E5%90%89%E5%A4%9A%C2%B7%E8%8C%83%E7%BD%97%E8%8B%8F%E5%A7%86">吉多·范罗苏姆</a>创造，第一版发布于1991年。<br /><br><br />Python的设计哲学强调代码的<strong>可读性和简洁</strong>的语法，尤其是使用<a href="https://zh.wikipedia.org/wiki/%E8%B6%8A%E4%BD%8D%E8%A7%84%E5%88%99">空格缩进</a>划分代码块。相比于C或Java，Python让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。<br /></p><blockquote><p><strong>Life is short, you need python. （人生苦短，我用Python。）</strong><br><strong>—— Bruce Eckel（《Thinking in Java》《Thinking in C++》等书作者）</strong></p></blockquote><p><a name="JN9FK"></a></p><h3 id="Python特点"><a href="#Python特点" class="headerlink" title="Python特点"></a>Python特点</h3><ul><li><strong>1.易于学习：</strong>Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</li><li><strong>2.易于阅读：</strong>Python代码定义的更清晰。</li><li><strong>3.易于维护：</strong>Python的成功在于它的源代码是相当容易维护的。</li><li><strong>4.一个广泛的标准库：</strong>Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。</li><li><strong>5.互动模式：</strong>互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。</li><li><strong>6.可移植：</strong>基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。</li><li><strong>7.可扩展：</strong>如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。</li><li><strong>8.数据库：</strong>Python提供所有主要的商业数据库的接口。</li><li><strong>9.GUI编程：</strong>Python支持GUI可以创建和移植到许多系统调用。</li><li>**10.可嵌入: **你可以将Python嵌入到C/C++程序，让你的程序的用户获得”脚本化”的能力。</li></ul><p><a name="yMneR"></a></p><h3 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h3><ul><li>Web应用</li><li>网络爬虫</li><li>自动化运维（脚本处理）</li><li>科学计算和统计</li><li>人工智能</li><li>大数据（数据清洗）</li><li>……</li></ul><p><br />2020年11月TIOBE编程语言排行榜单<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606722654696-ddb9117f-f890-4ec2-9384-2f589144b65b.png#align=left&display=inline&height=797&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1594&originWidth=1982&size=223335&status=done&style=none&width=991" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606722773045-7eae1273-6e65-4c3d-9400-bb132c25ebec.png#align=left&display=inline&height=445&margin=%5Bobject%20Object%5D&name=image.png&originHeight=890&originWidth=1870&size=173475&status=done&style=none&width=935" alt="image.png"><br /></p><p><a name="NmsPE"></a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>开发环境搭建就是安装Python的解释器<br />Python的解释器分类：</p><ul><li>CPython（官方）：用c语言编写的Python解释器</li><li>PyPy：用Python编写的Python解释器</li><li>IronPython：用.net编写的Python解释器</li><li>Jython：用Java编写的Python解释器</li></ul><p><a name="tyJSy"></a></p><h3 id="（1）下载安装包-python-3-9-0"><a href="#（1）下载安装包-python-3-9-0" class="headerlink" title="（1）下载安装包 python-3.9.0"></a>（1）下载安装包 <a href="https://www.python.org/downloads/">python-3.9.0</a></h3><p>Python最新源码，二进制文档，新闻资讯等可以在Python的官网查看到：<br />Python官网：<a href="https://www.python.org/">https://www.python.org/</a><br />你可以在以下链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等格式的文档。<br />Python文档下载地址：<a href="https://www.python.org/doc/">https://www.python.org/doc/</a><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606728256443-e5e55b8b-069f-4abd-8910-fca1228e1103.png#align=left&display=inline&height=390&margin=%5Bobject%20Object%5D&name=image.png&originHeight=780&originWidth=1744&size=232279&status=done&style=none&width=872" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606728372631-03971185-46d6-44ad-94b2-ddc704d9578b.png#align=left&display=inline&height=193&margin=%5Bobject%20Object%5D&name=image.png&originHeight=386&originWidth=1122&size=41860&status=done&style=none&width=561" alt="image.png"><br><a name="OKcki"></a></p><h3 id="（2）安装：傻瓜式安装"><a href="#（2）安装：傻瓜式安装" class="headerlink" title="（2）安装：傻瓜式安装"></a>（2）安装：傻瓜式安装</h3><p>Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。<br />只需要下载适用于使用平台的二进制代码，然后安装Python即可。<br />windows安装时，勾选<code>Add Python to PATH</code>，则无需手动配置环境变量。<br /><img src="http://oss.diorspo.cn/Fm48e6KBLsh_oV6i0NTxsuMKL2yx" alt="image.png"><br /></p><p><a name="4np29"></a></p><h3 id="（3）确认安装成功"><a href="#（3）确认安装成功" class="headerlink" title="（3）确认安装成功"></a>（3）确认安装成功</h3><p>打开命令行窗口，输入python，出现如下内容：</p><pre><code class="hljs bash">Python 3.7.4 (default, Jul  9 2019, 18:13:23) [Clang 10.0.1 (clang-1001.0.46.4)] on darwinType <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.&gt;&gt;&gt;</code></pre><p><a name="zMgg9"></a></p><h3 id="（4）安装集成开发环境"><a href="#（4）安装集成开发环境" class="headerlink" title="（4）安装集成开发环境"></a>（4）安装集成开发环境</h3><p><a name="pP8Uj"></a></p><h4 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h4><blockquote><p>编写一般脚本时更加快速，方便</p></blockquote><p>VSCode是一款免费开源的现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义热键等特性，支持插件扩展。<br />软件跨平台支持 Win、Mac以及 Linux。<br />通过安装Python相关的扩展插件，能够很好的支持Python的日常开发。<br />下载地址：<a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a><br /><img src="http://oss.diorspo.cn/Fk2sbsPQRZXR_-B4rx8N9KPtdSrV" alt="image.png"><br /></p><p><a name="0mUN2"></a></p><h4 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h4><blockquote><p>编写模块结构较复杂的应用项目时，功能更加强大</p></blockquote><p>PyCharm 是由 JetBrains 打造的一款 Python IDE，支持 macOS、 Windows、 Linux 系统。<br />功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制……<br />下载地址 : <a href="https://www.jetbrains.com/pycharm/download/">https://www.jetbrains.com/pycharm/download/</a><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606729307725-e56d3f49-c455-4c52-8a67-ec25c2db085d.png#align=left&display=inline&height=775&margin=%5Bobject%20Object%5D&originHeight=775&originWidth=985&size=0&status=done&style=none&width=985"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go程序设计语言-(一)入门</title>
    <link href="/2020/11/24/Go%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80-(%E4%B8%80)%E5%85%A5%E9%97%A8/"/>
    <url>/2020/11/24/Go%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80-(%E4%B8%80)%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="http://oss.diorspo.cn/fiveyears.jpg" alt="Golang">  </p><h2 id="简单谈谈为啥要学习Golang"><a href="#简单谈谈为啥要学习Golang" class="headerlink" title="简单谈谈为啥要学习Golang"></a>简单谈谈为啥要学习Golang</h2><p>很久之前就听说Golang在业内越来越受欢迎，使用它作为主要开发语言的厂商也逐渐增多，比如字节跳动基本都是Golang开发为主。       </p><p><img src="http://oss.diorspo.cn/QQ20201125-001925%402x.png" alt="2020年10月TIOBE排行"></p><p>2019年4月22日，发生了一件乌龙事件，哔哩哔哩的后端代码被上传到了GitHub（虽然不是新版本），当时凑热闹下载代码看了一眼，小破站的服务端也是使用Golang进行开发，是近两年才进行的重构；另外，今年暑期在阿里云实习期间也发现团队部分项目也根据需要使用了Golang进行开发，而不是一味再拘泥于Java；由此可见，Golang的优良特性吸引了越来越多的开发者投向其怀抱，我平时接触比较多的Docker、Promethus等等开源项目也都是Golang开发。因此，基于趋势和自己的兴趣，利用最后几个月学生生涯去拓展一下技术栈，似乎是不错的选择。  </p><hr><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>略过简单的安装步骤，写一个HelloWorld      </p><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;fmt.Println(<span class="hljs-string">&quot;Hello World&quot;</span>)&#125;</code></pre><p>与可以看，到Java类似，主要还是三个部分，首先是包声明<code>package main</code>，然后导入依赖包<code>import &quot;fmt&quot;</code>，最后是具体代码。值得新手注意的一点是Golang对import的内容有严格的要求，<strong>导入的包必须被使用，否则会编译出错</strong>，这是为了防止程序演化中引用不需要的包～～（还好我已经在写Java的过程中养成了快捷键提出无用包的习惯QAQ）<br><img src="http://oss.diorspo.cn/2.png" alt="无用包编译出错" title="无用包编译出错">     </p><p>Golang中声明为<code>main</code>的包和函数，根据经验可以想到是具有特殊含义的，即程序的入口。  </p><p>函数的声明和Java类似，但似乎更加灵活，以<code>func</code>开头，后面跟函数名，括号中可以放参数列表，返回值支持多个，返回值列表也可为空，如main函数。</p><p>与Java不同，Go不需要以分号结尾，除非有个多个语句或声明出现在同一行。    </p><p>另一个需要值得注意的点，Golang在代码格式上进行了严格的要求，比如在什么地方换行会影响Go代码的解析。例如:  </p><ul><li><code>&#123;</code>必须和关键字<code>func</code>在同一行</li><li>在表达式<code>x+y</code>中，<code>+</code>后面可以有换行，但不能在前面</li></ul><p>为了满足Golang对代码格式的严格要求，go提供了gofmt工具对代码以标准格式重写，可以配置ide自动在保存代码时进行格式化。   </p><p>既然是HelloWorld，也就必不可少的认识一下Go提供的一系列command，在命令行中输入<code>go -h</code>可以看到，一些常用的命令，如<code>run</code>,<code>build</code>,<code>fmt</code>……在开发中可以根据需要使用。</p><pre><code class="hljs bash">Go is a tool <span class="hljs-keyword">for</span> managing Go <span class="hljs-built_in">source</span> code.Usage:        go &lt;<span class="hljs-built_in">command</span>&gt; [arguments]The commands are:        bug         start a bug report        build       compile packages and dependencies        clean       remove object files and cached files        doc         show documentation <span class="hljs-keyword">for</span> package or symbol        env         <span class="hljs-built_in">print</span> Go environment information        fix         update packages to use new APIs        fmt         gofmt (reformat) package sources        generate    generate Go files by processing <span class="hljs-built_in">source</span>        get         add dependencies to current module and install them        install     compile and install packages and dependencies        list        list packages or modules        mod         module maintenance        run         compile and run Go program        <span class="hljs-built_in">test</span>        <span class="hljs-built_in">test</span> packages        tool        run specified go tool        version     <span class="hljs-built_in">print</span> Go version        vet         report likely mistakes <span class="hljs-keyword">in</span> packagesUse <span class="hljs-string">&quot;go help &lt;command&gt;&quot;</span> <span class="hljs-keyword">for</span> more information about a <span class="hljs-built_in">command</span>.Additional <span class="hljs-built_in">help</span> topics:        buildconstraint build constraints        buildmode       build modes        c               calling between Go and C        cache           build and <span class="hljs-built_in">test</span> caching        environment     environment variables        filetype        file types        go.mod          the go.mod file        gopath          GOPATH environment variable        gopath-get      legacy GOPATH go get        goproxy         module proxy protocol        importpath      import path syntax        modules         modules, module versions, and more        module-get      module-aware go get        module-auth     module authentication using go.sum        module-private  module configuration <span class="hljs-keyword">for</span> non-public modules        packages        package lists and patterns        testflag        testing flags        testfunc        testing <span class="hljs-built_in">functions</span>Use <span class="hljs-string">&quot;go help &lt;topic&gt;&quot;</span> <span class="hljs-keyword">for</span> more information about that topic.</code></pre>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020春招暑期实习-总结</title>
    <link href="/2020/04/20/2020%E6%98%A5%E6%8B%9B%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2020/04/20/2020%E6%98%A5%E6%8B%9B%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="2020暑期实习春招"><a href="#2020暑期实习春招" class="headerlink" title="2020暑期实习春招"></a>2020暑期实习春招</h1><p>历时近一个月，紧张刺激的春招终于告一段落。面试一周，等结果半个月，所幸功夫不负有心人，我拿到了心心念念的阿里offer。在尽情浪了两天后还是决定对这次春招找实习的过程进行一次回顾和总结，方便为秋招进一步提高和完善做准备，同时也可以分享给大家做一些参考。   </p><h2 id="一、Offer情况"><a href="#一、Offer情况" class="headerlink" title="一、Offer情况"></a>一、Offer情况</h2><p>我从本科阶段开始一直在学习和参与一些Java Web项目的开发，加上保研结束进入实验室的两年来也都在做Java后端的开发，所以春招投递的岗位自然都是Java开发相关。   </p><p>春招期间我面了三家公司，分别是美团、阿里、腾讯，最终成功收到三家公司的offer，具体如下：  </p><ul><li>美团到家事业群-外卖配送技术部-系统开发岗位-Base北京    </li><li>腾讯云与智慧产业事业群(CSIG)-软件后台开发岗位-Base成都  </li><li>阿里云智能事业群-阿里云-Java研发工程师-Base杭州    </li></ul><p>实习生的Offer待遇方面，公司通常都是根据学历有统一的标准，各大厂的待遇往往也差不多（当然，字节、PDD之流的土豪除外QAQ）。 通常都是</p><p style="text-align:center">薪资福利=（出勤日x工资/天+出勤率x房补/月）</p>具体的大家自己百度即可～   不过相比美团的待遇，腾讯首月会发2000的异地交通补贴还是让我挺意外的。<h2 id="二、春招历程"><a href="#二、春招历程" class="headerlink" title="二、春招历程"></a>二、春招历程</h2><p>根据我的个人经历，我将整个春招的过程可以大致分为如下几个部分：  </p><ul><li><strong>准备阶段</strong>：制作简历，复习知识，整理资料，投递简历    </li><li><strong>进行阶段</strong>：笔试+面试+查漏补缺   </li><li><strong>结果阶段</strong>：漫长的oc等待，与其他公司HR互演（-.-）     </li></ul><p>下面简单介绍一下我在这三个阶段中的一些大概经历和感受，不展开讲细节，详细内容留到后续有空针对每一块写一些经验文章。   </p><h3 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1. 准备阶段"></a>1. 准备阶段</h3><p>对于找工作的准备，我个人的建议是越早越好，提前一个月为佳，这样节奏可以舒适一些（也没必要太早）。针对岗位的知识面覆盖要广，同时对于关键的常问点要有深入的钻研和理解。<br>今年最大的意外，就是没想到遇到疫情这种尴尬情况。<br>这波疫情对各个公司的春招带了不少不确定因素，另外疫情期间实验室也趁热输出了一波业务需求，所以我整个二月和三月初都在给实验室搬砖，没有时间去尽早地开始复习，同时也错过了阿里的提前批。<br>跟我身边同学的情况，如果二月中旬开始复习刷题准备，三月初就可以拿到一些公司的offer，如字节。    </p><h4 id="关于复习"><a href="#关于复习" class="headerlink" title="关于复习"></a>关于复习</h4><p>关于如何复习，复习哪些知识点，还是留到以后的分享，在这里先粗略的讲一下我的复习过程。        </p><p>因为我平时写Java挺多，实验室的项目也一直没停，很多框架和数据库都有用到，基础知识也都有印象，所以我首先看了两本深入的书籍，分别是《深入理解Java虚拟机》（我买的时候第三版还没出，后来发现微信阅读可以看第三版）和《Java并发编程艺术》。先看这两本书的原因是我对Java虚拟机相关知识了解不够多，并发编程平时用的也不是很多，所以认真看了一遍去弥补了知识的空缺。     </p><p>看完两本书之后就开始<strong>系统地</strong>复习各个科目的知识，复习过程中一定要在脑海中形成知识体系，很多知识点是可以串联起来，或者思想可以相互借鉴，这样在面试的过程中往往就是顺着往下问的问题。这里可以推荐一下两个不错的项目<a href="https://cyc2018.github.io/CS-Notes/">CyC2018/CSNotes</a>和<a href="https://snailclimb.gitee.io/javaguide/#/">JavaGuide</a>，两位作者总结的非常系统全面，给了我非常大的帮助，大家可以Star一下。个人偏向先根据CSNotes进行一次全面的复习，然后对于不够深入或者没提到的可以再去JavaGuide完善自己的知识体系，也可以反过来；不过，对于有些知识点，作者没法花大篇幅去深入讲，还是需要我们自己去查找搜集一些资料进一步深入学习。与此同时，我又将那两本书有<strong>针对性地</strong>看了两遍，并且适当地刷了一些leetcode和剑指offer的题目为笔试和面试中的手撕代码做准备。     </p><p>这里对于算法题要多说一些，这两年的情况是各个大厂对于笔试的重视程度的确都有不小的提高，华为面试也开始撕代码了，阿里以前是内推可以免笔试的，但是今年必须笔试，笔试成绩差可能就不约面试或者面试流程中还要加笔试面。所以我觉得多刷点题目总归是好的，我在大三结束保研成功后，基本没有再去接触过算法相关的东西，所以做阿里笔试就发挥的不是很好，中间又加了一面笔试，还好最后阿里抬了一手，给了offer。所以朋友们多刷点题吧，尤其笔试面试中常见的类型，刷题主要针对简单题和中等题即可，难度不用超过Leetcode中等题，因为据说Hard难度的题目面试官可能也不会😂。    </p><h4 id="投递简历"><a href="#投递简历" class="headerlink" title="投递简历"></a>投递简历</h4><p>简历制作的过程比较痛苦，改了很多次，也请教了学长学姐。简历既不能太空，也不能花里胡哨；哪些内容该写，哪些不该写，都要仔细斟酌，不然都会给自己埋下坑。关于简历制作我准备后面和其他同学讨论总结一波，写一篇专门的文章来讲讲，希望可以给大家秋招一些帮助。    </p><p>在投递简历时，我投递了美团的基础研发平台(Base上海)，不过被北京的外卖配送技术团队截胡捞了，美团也是我最早收到的面试。当时对找工作的面试没有一点经验，出于强烈的求生欲，就没有拒绝面试重新进池子（毕竟北京和上海又能有多少区别呢，还有就是部门还挺核心的^_^）；   </p><p>腾讯我投递了上海，由于腾讯大多数业务都是写C++比较多，我对这方面不了解，也就没有选择意向事业群，最后是被腾讯云数据库产品团队捞起来，Base在成都。这里由于个人对成都这个城市还挺有好感（爱吃辣的我没法拒绝），同时对云计算业务的前景比较看好（个人是阿里云和腾讯云的深度用户），所以也就欣然接受了面试。    </p><p>至于阿里，可以说是我的第一志愿，当时最感兴趣的是蚂蚁金服和阿里云，由于错过了提前批，所以只有一次机会，咨询了实验室的学长学姐并且再三考虑后，决定选择阿里云投递，并且通过一个靠谱的学长内推到他们部门。      </p><p>在这里需要强调一下内推的重要性，熟人内推最大的好处之一就是方便地查询流程和进度，另外可以详细了解部门的业务和情况。不过美团的内推好像没啥用，腾讯的状态在校招官网上比较清楚，也可以加群让HR帮查。因为我投阿里是有靠谱学长内推，所以每一面之后都可以方便地了解到状态，有时还可以聊一下一些面试的小反馈，这些信息我觉得挺关键。         </p><h3 id="2-进行阶段"><a href="#2-进行阶段" class="headerlink" title="2. 进行阶段"></a>2. 进行阶段</h3><p>各个大厂的校招流程基本都大同小异，总结一下可以氛围以下步骤：   </p><ul><li><p>测评：性格测试，主要考察个人性格，团队协作能力，领导能力，乐观悲观，创新型/保守型…… 题目通常都是选择题，不涉及技术或专业知识。很多人可能不重视，但是的确会有公司因为性格测试直接挂掉同学，比如华为～    </p></li><li><p>笔试：客观题(选择题)+问答题+编程算法题，其中客观题和问答题只有部分公司的笔试会有，大多数公司的笔试都是直接2-4道算法题，笔试非常重要，关系着能否收到面试或者是后续的评价。   </p></li><li><p>面试：通常是技术面+HR面，技术面会有多轮，不同公司，不同部门都有区别，就我的经历如下：  </p><ul><li>阿里：3轮技术面+1轮交叉技术面+HR面，阿里往往第2轮或第3轮会是团队leader面，我当时情况特殊，第一面就是团队leader   </li><li>腾讯：2轮技术面+HR面，腾讯第二轮是主管面。   </li><li>美团：3轮技术面，一面是个年轻老哥，二面是团队leader，三面是部门主管。美团没有HR面，三面结束后，HR就打电话来问了一些信息，就给了offer；另外美团有的部门是2面，有的是3面，具体哪些部门区别我就不清楚了。      </li></ul></li></ul><p>根据我自己的面试体验，以及和基友的讨论，不同公司的面试风格和侧重点都是不同的。个人感觉阿里比较看重项目经验，有项目的话，会根据项目聊挺多的，因为每一面都是有记录的，往往一面会问基础知识比较多，后面几面就比较会问一些场景题，或者就聊项目里的一些<strong>“重点”</strong>，并且拓展开一些问题。字节跳动就三面问项目都比较少，而且每一面都会撕代码，有时候面试表现差一些，如果代码撕地好，也可以拉回来，对于刷题党是福音。而我面的另外两家，腾讯一面问了一堆知识，二面纯聊项目；美团一二面问知识，三面聊项目。所以大家准备面试的时候还是要准备一下自己的项目，至于怎么准备，如何去把项目讲好也是一门学问了。     </p><p>技术面试和HR面也不一样，HR都是人精，会从你的只言片语中判断你的性格、品质、优缺点，从而判断你是否适合这个公司，适合这个岗位。很多人觉得到了HR面就稳了，实际上很多公司的HR都有一票否决权，发不发offer，往往在HR一念之间，所以HR面也是需要做一些准备的。   </p><h3 id="3-结果阶段"><a href="#3-结果阶段" class="headerlink" title="3. 结果阶段"></a>3. 结果阶段</h3><p>结果的等待是漫长而煎熬的，我从3.23开始投递简历，一周面完了三家公司的技术面，除了美团4.1发的offer，腾讯和阿里都是到前两天才收到意向书，这个过程中很慌，同时也因为很累导致不想再面别家，虽然做了一些公司的笔试，最近因为收到了阿里腾讯的offer，我也拒绝了后续的面试。   </p><p>等结果通常会有三种消息：   </p><ul><li>感谢信：感谢您投递，综合考虑您不适合…… 其实就是发好人卡了，凉了   </li><li>offer call：HR打来电话告知面试通过，给口头offer   </li><li>意向书：通常都是邮件收到意向书，这时候才能算尘埃落定</li></ul><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>暑期实习基本都是有转正机会，如果能进入心仪的公司实习，并且顺利通过转正答辩，毕业的工作就有了保障。秋招就不会有什么压力，面试别家也有argue的资本。<br>对于我们学生来说，毕业的工作就决定了我们未来发展的起点，可能就是改变人生的选择，因此找一份好的工作真的很重要，准备地再充分都不为过。这两年因为各种原因，个人感觉IT行业的整体招聘难度变大，竞争愈发激烈，希望我们每个人都能通过自己的努力，斩获满意的offer吧！   </p>]]></content>
    
    
    
    <tags>
      
      <tag>实习面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
