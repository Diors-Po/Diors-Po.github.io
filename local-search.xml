<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python入门-2.6 集合(Set)</title>
    <link href="/2020/12/25/python%E5%85%A5%E9%97%A8/2.6%20%E9%9B%86%E5%90%88-Set/"/>
    <url>/2020/12/25/python%E5%85%A5%E9%97%A8/2.6%20%E9%9B%86%E5%90%88-Set/</url>
    
    <content type="html"><![CDATA[<h1 id="2-6-集合（Set）"><a href="#2-6-集合（Set）" class="headerlink" title="2.6 集合（Set）"></a>2.6 集合（Set）</h1><p>Python中的集合，和数学中的集合概念一样，用来<strong>保存不重复的元素</strong>，即集合中的元素都是<strong>无序的，唯一的</strong>，互不相同。</p><pre><code class="hljs python">&#123;element1,element2,...,elementn&#125;</code></pre><ul><li>从形式上看，和字典类似，Python 集合会将所有元素放在一对大括号 {} 中，相邻元素之间用“,”分隔</li><li>从内容上看，同一集合中，<strong>只能存储不可变的数据类型</strong>，包括整形、浮点型、字符串、元组，无法存储列表、字典、集合这些可变的数据类型，否则 Python 解释器会抛出 TypeError 错误。</li><li>由于 Python 中的 set 集合是无序的，所以<strong>每次输出时元素的排序顺序可能都不相同</strong>。<blockquote><p>其实，Python 中有两种集合类型，<strong>一种是 set 类型的集合，另一种是 frozenset 类型的集合</strong>，它们唯一的区别是，set 类型集合可以做添加、删除元素的操作，而 forzenset 类型集合不行。因此，仔细划分set是可变类型，frozenset是不可变类型</p></blockquote></li></ul><h3 id="创建set集合"><a href="#创建set集合" class="headerlink" title="创建set集合"></a>创建set集合</h3><p>Python 提供了 2 种创建 set 集合的方法，分别是使用 {} 创建和使用 set() 函数将列表、元组等类型数据转换为集合。</p><h4 id="1-使用-创建"><a href="#1-使用-创建" class="headerlink" title="(1) 使用 {} 创建"></a>(1) 使用 {} 创建</h4><p>在 Python 中，创建 set 集合可以像列表、元素和字典一样，直接将集合赋值给变量，从而实现创建集合的目的。<br /><code>setname = &#123;element1,element2,...,elementn&#125;</code></p><h4 id="2-set-函数创建集合"><a href="#2-set-函数创建集合" class="headerlink" title="(2) set()函数创建集合"></a>(2) set()函数创建集合</h4><p>set() 函数为 Python 的内置函数，其功能是将字符串、列表、元组等可迭代对象转换成集合。该函数的语法格式如下：<br /><code>setname = set(iteration)</code></p><pre><code class="hljs python">set0 = &#123;<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">1</span>,(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),<span class="hljs-string">&#x27;c&#x27;</span>&#125;set1 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;hello&quot;</span>)set2 = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])set3 = <span class="hljs-built_in">set</span>((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))print(<span class="hljs-string">&quot;set0:&quot;</span>,set0)print(<span class="hljs-string">&quot;set1:&quot;</span>,set1)print(<span class="hljs-string">&quot;set2:&quot;</span>,set2)print(<span class="hljs-string">&quot;set3:&quot;</span>,set3)</code></pre><blockquote><p>问题：直接创建 a = {}，是字典还是集合？</p></blockquote><h3 id="访问set集合元素"><a href="#访问set集合元素" class="headerlink" title="访问set集合元素"></a>访问set集合元素</h3><p>由于集合中的元素是无序的，因此无法向列表那样使用下标访问元素。<br />Python 中，访问集合元素最常用的方法是使用循环结构，将集合中的数据逐一读取出来。<br /></p><pre><code class="hljs python"><span class="hljs-number">1.</span>普通集合的遍历    <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 集合：        使用变量<span class="hljs-number">2.</span>多级集合    集合 = &#123;（值,值..）,（值，值..）。。。&#125;    <span class="hljs-keyword">for</span> 变量<span class="hljs-number">1</span>，变量<span class="hljs-number">2</span> <span class="hljs-keyword">in</span> 集合：        使用变量<span class="hljs-number">1</span>和变量<span class="hljs-number">2</span></code></pre><pre><code class="hljs python">a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> a:    print(item)a = &#123;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)&#125;<span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> a:    print(i,j)</code></pre><p>集合还支持一些运算符操作</p><ul><li>in 判断是否存在</li><li><ul><li>差集</li></ul></li><li>| 并集</li><li>&amp; 交集</li><li>^ 不同时存在的元素<pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span>student = &#123;<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Jim&#x27;</span>, <span class="hljs-string">&#x27;Mary&#x27;</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>&#125;print(student)   <span class="hljs-comment"># 输出集合，重复的元素被自动去掉</span><span class="hljs-comment"># 成员测试</span><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;Rose&#x27;</span> <span class="hljs-keyword">in</span> student) :    print(<span class="hljs-string">&#x27;Rose 在集合中&#x27;</span>)<span class="hljs-keyword">else</span> :    print(<span class="hljs-string">&#x27;Rose 不在集合中&#x27;</span>)<span class="hljs-comment"># set可以进行集合运算</span>a = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;abracadabra&#x27;</span>)b = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alacazam&#x27;</span>)print(a)print(a - b)     <span class="hljs-comment"># a和b的差集</span>print(a | b)     <span class="hljs-comment"># a和b的并集</span>print(a &amp; b)     <span class="hljs-comment"># a和b的交集</span>print(a ^ b)     <span class="hljs-comment"># a和b中不同时存在的元素</span></code></pre></li></ul><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><ul><li>setname.add(o): 为集合添加一个元素</li><li>setname.update(o)：可以添加元素，且参数可以是列表，元组，字典等<pre><code class="hljs python"><span class="hljs-comment"># 添加一个元素</span>student = &#123;<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Jim&#x27;</span>&#125;student.add(<span class="hljs-string">&#x27;Lily&#x27;</span>)print(student)<span class="hljs-comment"># 添加多个元素</span>student.update([<span class="hljs-string">&#x27;Mary&#x27;</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>])print(student)</code></pre></li></ul><h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h3><ul><li>setname.remove(o): 移除指定元素，不存在报错</li><li>setname.discard(o)：移除指定元素，不存在不报错</li><li>setname.pop()：随机移除一个元素</li><li>setname.clear()：清空集合</li></ul><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="集合的序列函数："><a href="#集合的序列函数：" class="headerlink" title="集合的序列函数："></a>集合的序列函数：</h4><ul><li>len() 计算集合的长度<br /></li><li>max() 获取集合中的最大值<br /></li><li>min() 获取集合中的最小值<br /></li><li>set() 创建空集合或者将其他数据转换为集合<br /></li></ul><h4 id="集合中的方法："><a href="#集合中的方法：" class="headerlink" title="集合中的方法："></a>集合中的方法：</h4><ul><li><p>add – 增加集合元素</p><pre><code class="hljs python">name = &#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;name.add(<span class="hljs-string">&#x27;d&#x27;</span>)name返回结果：&#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;name.add(<span class="hljs-string">&#x27;sd&#x27;</span>)name返回结果：&#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;</code></pre></li><li><p>update–更新已有集合</p><pre><code class="hljs python">name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;name.update(<span class="hljs-string">&#x27;df&#x27;</span>)name返回结果：&#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;</code></pre></li><li><p>remove–移除指定集合元素</p><pre><code class="hljs python">name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>&#125;name.remove(<span class="hljs-string">&#x27;s&#x27;</span>)返回结果：name&#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;</code></pre></li><li><p>discard–移除元素</p><pre><code class="hljs python">name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;name.discard(<span class="hljs-string">&#x27;s&#x27;</span>)返回结果：name         &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;<span class="hljs-comment"># remove移除非成员值会报错，discard移除非成员值，啥也不错！</span></code></pre></li><li><p>clear–清空集合元素</p><pre><code class="hljs python">name = &#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;name.clear()name返回结果：&#123;&#125;</code></pre></li><li><p>copy–浅拷贝</p><pre><code class="hljs python">name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;li = name.copy()返回结果：li        &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;</code></pre></li><li><p>difference – 求差集</p><pre><code class="hljs python">name.difference(li)<span class="hljs-built_in">set</span>()<span class="hljs-meta">&gt;&gt;&gt; </span>name.difference()&#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;</code></pre></li><li><p>union–并集，创建新的对象</p><pre><code class="hljs python">name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;li = &#123;<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>&#125;name.union(li)返回结果：&#123;<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;sd&#x27;</span>&#125;</code></pre></li><li><p>difference_update—删除当前set中的所有包含在 new set 里的元素</p><pre><code class="hljs python">li = (<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>)name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;name.difference_update(li)name返回结果：&#123;<span class="hljs-string">&#x27;sd&#x27;</span>&#125;</code></pre></li><li><p>intersection–取交集,建立新的set集合</p><pre><code class="hljs python">li = (<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>)name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;name.intersection(li)返回结果：&#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;</code></pre></li><li><p>intersection_update–取交集,更新原来的set集合</p><pre><code class="hljs python">li = (<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>)name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;name.intersection_update(li)返回结果：&#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;</code></pre></li><li><p>isdisjoint–判断没有交集，返回True,否则,返回False</p><pre><code class="hljs python">li = &#123;<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;name.isdisjoint(li)</code></pre></li><li><p>issubset–判断是否是子集</p><pre><code class="hljs python">li = &#123;<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;name.issubset(li)  <span class="hljs-comment">#判断name是不是li的子集</span>返回结果：<span class="hljs-literal">False</span>li.issubset(name)  <span class="hljs-comment">#判断li是不是name的子集</span>返回结果：<span class="hljs-literal">True</span></code></pre></li><li><p>issuperset–判断是否是父集</p><pre><code class="hljs python">li = &#123;<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;name.issuperset(li)  <span class="hljs-comment">#判断name是不是li的父集</span>返回结果：<span class="hljs-literal">True</span>li.issuperset(name)  <span class="hljs-comment">#判断li是不是name的父集</span>返回结果：<span class="hljs-literal">False</span></code></pre></li><li><p>pop–移除集合元素</p><pre><code class="hljs python">name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;name.pop()返回结果：<span class="hljs-string">&#x27;sd&#x27;</span> <span class="hljs-comment">#同一个集合，删除集合元素的顺序固定</span>se1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;sb&#x27;</span>&#125;se1.pop()返回结果：<span class="hljs-string">&#x27;sb&#x27;</span></code></pre></li><li><p>symmetric_difference–去两个集合的差集，建立新的set集合对象</p><pre><code class="hljs python">name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;li = &#123;<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;name.symmetric_difference(li)返回结果：&#123;<span class="hljs-string">&#x27;sd&#x27;</span>&#125;</code></pre></li><li><p>symmetric_difference_update–去两个集合的差集，更新原来的集合对象</p><pre><code class="hljs python">name = &#123;<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>&#125;li = &#123;<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;name.symmetric_difference_update(li)返回结果：&#123;<span class="hljs-string">&#x27;sd&#x27;</span>&#125;</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>默认</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门-2.5 字典(Dictionary)</title>
    <link href="/2020/12/25/python%E5%85%A5%E9%97%A8/2.5%20%E5%AD%97%E5%85%B8-Dict/"/>
    <url>/2020/12/25/python%E5%85%A5%E9%97%A8/2.5%20%E5%AD%97%E5%85%B8-Dict/</url>
    
    <content type="html"><![CDATA[<h1 id="2-5-字典（Dictionary）"><a href="#2-5-字典（Dictionary）" class="headerlink" title="2.5 字典（Dictionary）"></a>2.5 字典（Dictionary）</h1><p>字典（dictionary）是Python中另一个非常有用的内置数据类型。<br />字典（dict）是一种<strong>无序的、可变的序列</strong>，它的元素以“键值对（key-value）”的形式存储。相对地，列表（list）和元组（tuple）都是有序的序列，</p><blockquote><p>规范中dict遍历是不保证顺序的，但一定保证每个元素都被遍历一次<br>实现可以是无序，也可以是有序，都符合规范</p></blockquote><blockquote><p>Py3.5是无序的，3.6, 3.7是有序的，但不能说dict就是有序的。</p></blockquote><p>字典类型是 Python 中唯一的映射类型。“映射”是数学中的术语，简单理解，它指的是元素之间相互对应的关系，即通过一个元素，可以唯一找到另一个元素。如下图所示。<br /><img src="http://oss.diorspo.cn/FmBDs4v0ChpmHRAXvkIuRVspDBIT" alt="字典映射关系"><br />字典中，习惯将各元素对应的索引称为键（key），各个键对应的元素称为值（value），键及其关联的值称为“键值对”。</p><blockquote><p>字典类型很像学生时代常用的新华字典。通过新华字典中的音节表，可以快速找到想要查找的汉字。其中，字典里的音节表就相当于字典类型中的键，而键对应的汉字则相当于值。</p></blockquote><p>它们的元素在底层是挨着存放的。</p><ul><li>字典是另一种可变容器模型，且可存储任意类型对象。</li><li>字典的每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号中 ,格式如下所示：<pre><code class="hljs python">d = &#123;key1 : value1, key2 : value2 &#125;</code></pre></li></ul><h3 id="Python-字典特征"><a href="#Python-字典特征" class="headerlink" title="Python 字典特征"></a>Python 字典特征</h3><table><thead><tr><th>主要特征</th><th>解释</th></tr></thead><tbody><tr><td>通过键而不是通过索引来读取元素</td><td>字典类型有时也称为关联数组或者散列表（hash）。它是通过键将一系列的值联系起来的，这样就可以通过键从字典中获取指定项，但不能通过索引来获取。</td></tr><tr><td>字典是<strong>任意数据类型</strong>的无序集合</td><td>和列表、元组不同，通常会将索引值 0 对应的元素称为第一个元素，而字典中的元素是无序的。</td></tr><tr><td>字典是<strong>可变</strong>的，并且可以任意<strong>嵌套</strong></td><td>字典可以在原处增长或者缩短（无需生成一个副本），并且它支持任意深度的嵌套，即字典存储的值也可以是列表或其它的字典。</td></tr><tr><td>字典中的键必须唯一（值不必唯一）</td><td>字典中，不支持同一个键出现多次，否则只会保留最后一个键值对。</td></tr><tr><td>字典中的键必须不可变</td><td>字典中每个键值对的键是不可变的，只能使用数字、字符串或者元组，不能使用列表。</td></tr></tbody></table><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><pre><code class="hljs gcode"><span class="hljs-number">1.</span>创建空字典    变量 = &#123;&#125; 或者 变量 = dict<span class="hljs-comment">()</span><span class="hljs-number">2.</span>创建多个元素的字典：    方法<span class="hljs-number">1</span>：直接创建        变量 = &#123;键:值,键:值....&#125;    方法<span class="hljs-number">2</span>：        变量 = dict<span class="hljs-comment">(&#123;键:值,键:值....&#125;)</span>    方法<span class="hljs-number">3</span>：        变量 = dict<span class="hljs-comment">(键=值,键=值...)</span>        注意：该方式键作为形参名使用不可以添加引号，必须符合变量规则    方法<span class="hljs-number">4</span>：        变量 = dict<span class="hljs-comment">([(键,值)</span>,<span class="hljs-comment">(键,值)</span>...])        变量 = dict<span class="hljs-comment">([[键,值],[键,值]...])</span>        变量 = dict<span class="hljs-comment">(((键,值)</span>,<span class="hljs-comment">(键,值)</span>...))    方法<span class="hljs-number">5</span>：        变量 = dict<span class="hljs-comment">(zip((键，键...)</span>,<span class="hljs-comment">(值,值...)</span>))</code></pre><br /><h4 id="1-使用-直接创建"><a href="#1-使用-直接创建" class="headerlink" title="(1) 使用 { } 直接创建"></a>(1) 使用 { } 直接创建</h4><p>字典的键可以是整数、字符串或者元组，只要符合唯一和不可变的特性就行；字典的值可以是 Python 支持的任意数据类型。</p><pre><code class="hljs python"><span class="hljs-comment">#使用字符串作为key</span>scores = &#123;<span class="hljs-string">&#x27;数学&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;英语&#x27;</span>: <span class="hljs-number">92</span>, <span class="hljs-string">&#x27;语文&#x27;</span>: <span class="hljs-number">84</span>&#125;print(scores)<span class="hljs-comment">#使用元组和数字作为key</span>dict1 = &#123;(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>): <span class="hljs-string">&#x27;great&#x27;</span>, <span class="hljs-number">30</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]&#125;print(dict1)<span class="hljs-comment">#创建空元组</span>dict2 = &#123;&#125;print(dict2)</code></pre><h4 id="2-通过-fromkeys-方法创建"><a href="#2-通过-fromkeys-方法创建" class="headerlink" title="(2) 通过 fromkeys() 方法创建"></a>(2) 通过 fromkeys() 方法创建</h4><p>Python 中，还可以使用 dict 字典类型提供的 fromkeys() 方法创建带有默认值的字典，格式为</p><pre><code class="hljs python">dictname = <span class="hljs-built_in">dict</span>.fromkeys(<span class="hljs-built_in">list</span>，value=<span class="hljs-literal">None</span>)</code></pre><p>其中，list 参数表示字典中所有键的列表（list）；value 参数表示默认值，如果不写，则为空值 None。</p><pre><code class="hljs python">knowledge = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>]scores = <span class="hljs-built_in">dict</span>.fromkeys(knowledge, <span class="hljs-number">60</span>)print(scores)</code></pre><h4 id="3-通过-dict-映射函数创建"><a href="#3-通过-dict-映射函数创建" class="headerlink" title="(3) 通过 dict() 映射函数创建"></a>(3) 通过 dict() 映射函数创建</h4><p>通过 dict() 函数创建字典的写法有多种，下表罗列出了常用的几种方式，它们创建的都是同一个字典 a。</p><table><thead><tr><th>创建格式</th><th>注意事项</th></tr></thead><tbody><tr><td>a = dict(str1=value1, str2=value2, str3=value3)</td><td>str 表示字符串类型的键，value 表示键对应的值。使用此方式创建字典时，字符串不能带引号。</td></tr><tr><td>#方式1<br />demo = [(‘two’,2), (‘one’,1), (‘three’,3)]<br />#方式2<br />demo = [[‘two’,2], [‘one’,1], [‘three’,3]]<br />#方式3<br />demo = ((‘two’,2), (‘one’,1), (‘three’,3))<br />#方式4<br />demo = ([‘two’,2], [‘one’,1], [‘three’,3])<br />a = dict(demo)</td><td>向 dict() 函数传入列表或元组，而它们中的元素又各自是包含 2 个元素的列表或元组，其中第一个元素作为键，第二个元素作为值。</td></tr><tr><td>keys = [‘one’, ‘two’, ‘three’] #还可以是字符串或元组<br />values = [1, 2, 3] #还可以是字符串或元组<br />a = dict( zip(keys, values) )</td><td>通过应用 dict() 函数和 zip() 函数，可将前两个列表转换为对应的字典。</td></tr></tbody></table><pre><code class="hljs python">dict1 = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&quot;John&quot;</span>, age=<span class="hljs-number">18</span>)print(dict1)dict2 = <span class="hljs-built_in">dict</span>([[<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;John&quot;</span>],[<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>]])print(dict2)keys = [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>] <span class="hljs-comment">#还可以是字符串或元组</span>values = [<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">18</span>] <span class="hljs-comment">#还可以是字符串或元组</span>dict3 = <span class="hljs-built_in">dict</span>( <span class="hljs-built_in">zip</span>(keys, values) )print(dict3)</code></pre><blockquote><p>注意，无论采用以上哪种方式创建字典，<strong>字典中各元素的键都只能是字符串、元组或数字</strong>，不能是列表。列表是可变的，不能作为键。</p></blockquote><h3 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h3><p>列表和元组是通过下标来访问元素的，而字典不同，它通过键来访问对应的值。<br />因为字典中的元素是无序的，每个元素的位置都不固定，所以字典也不能像列表和元组那样，采用切片的方式一次性访问多个元素。<br /></p><h4 id="1-直接通过键名访问"><a href="#1-直接通过键名访问" class="headerlink" title="(1) 直接通过键名访问"></a>(1) 直接通过键名访问</h4><p>访问字典元素的格式为<code>dictname[key]</code><br />其中，dictname 表示字典变量的名字，key 表示键名。注意，键必须是存在的，否则会抛出异常。</p><pre><code class="hljs python">tup = ([<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-number">26</span>], [<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-number">88</span>], [<span class="hljs-string">&#x27;three&#x27;</span>,<span class="hljs-number">100</span>], [<span class="hljs-string">&#x27;four&#x27;</span>,<span class="hljs-number">-59</span>])dic = <span class="hljs-built_in">dict</span>(tup)print(dic[<span class="hljs-string">&#x27;one&#x27;</span>])  <span class="hljs-comment">#键存在</span>print(dic[<span class="hljs-string">&#x27;five&#x27;</span>])  <span class="hljs-comment">#键不存在</span></code></pre><h4 id="2-get-方法"><a href="#2-get-方法" class="headerlink" title="(2) get()方法"></a>(2) get()方法</h4><p>除了上面这种方式外，Python 更推荐使用 dict 类型提供的 get() 方法来获取指定键对应的值。当指定的键不存在时，get() 方法不会抛出异常。<br />get() 方法的语法格式为：<code>dictname.get(key[,default])</code><br />其中，dictname 表示字典变量的名字；key 表示指定的键；default 用于指定要查询的键不存在时，此方法返回的默认值，如果不手动指定，会返回 None。</p><pre><code class="hljs python">a = <span class="hljs-built_in">dict</span>(two=<span class="hljs-number">0.65</span>, one=<span class="hljs-number">88</span>, three=<span class="hljs-number">100</span>, four=<span class="hljs-number">-59</span>)print( a.get(<span class="hljs-string">&#x27;one&#x27;</span>) )print( a.get(<span class="hljs-string">&#x27;five&#x27;</span>,<span class="hljs-number">0</span>))</code></pre><h3 id="删除字典元素"><a href="#删除字典元素" class="headerlink" title="删除字典元素"></a>删除字典元素</h3><ul><li>del dict[key]</li><li>clear()：清空字典</li><li>pop(key, [default])：删除指定key的值，并返回<pre><code class="hljs python">a = <span class="hljs-built_in">dict</span>(two=<span class="hljs-number">0.65</span>, one=<span class="hljs-number">88</span>, three=<span class="hljs-number">100</span>, four=<span class="hljs-number">-59</span>)<span class="hljs-comment"># 删除字典元素</span><span class="hljs-keyword">del</span> a[<span class="hljs-string">&#x27;one&#x27;</span>]print(a)item = a.pop(<span class="hljs-string">&#x27;two&#x27;</span>)print(<span class="hljs-string">&quot;元素值&#123;&#125;被删除&quot;</span>.<span class="hljs-built_in">format</span>(item))print(a)<span class="hljs-comment"># 清空字典</span>a.clear()print(a)</code></pre></li></ul><h3 id="添加与修改"><a href="#添加与修改" class="headerlink" title="添加与修改"></a>添加与修改</h3><p>添加与修改均直接通过<code>dictname[key]=value</code>的方式进行。<br />如果key存在，则更新值<br />如果key不存在，则新增</p><pre><code class="hljs python">a = &#123;&#125;a[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;John&quot;</span>print(a)a[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;Jony&quot;</span>print(a)</code></pre><h3 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h3><pre><code class="hljs matlab"><span class="hljs-number">1.</span>键的遍历    <span class="hljs-keyword">for</span> 变量<span class="hljs-built_in">i</span> in 字典：        使用<span class="hljs-built_in">i</span>遍历所有的键，有键就可以通过变量访问其值<span class="hljs-number">2.</span>键值遍历    <span class="hljs-keyword">for</span> 变量<span class="hljs-built_in">i</span>，变量<span class="hljs-built_in">j</span> in 字典.items()：        使用变量<span class="hljs-built_in">i</span>遍历所有键，通过变量<span class="hljs-built_in">j</span>遍历所有值</code></pre><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;数学&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;英语&#x27;</span>: <span class="hljs-number">92</span>, <span class="hljs-string">&#x27;语文&#x27;</span>: <span class="hljs-number">84</span>&#125;<span class="hljs-comment">## 方式1</span><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> scores:    print(key, scores[key])<span class="hljs-comment">## 方式2</span><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> scores.items():    print(key, value)</code></pre><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="字典内置函数-amp-方法："><a href="#字典内置函数-amp-方法：" class="headerlink" title="字典内置函数&amp;方法："></a>字典内置函数&amp;方法：</h4><ul><li><p>Python字典包含了以下内置函数：</p><table><thead><tr><th>序号</th><th>函数名称</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>1</td><td>len(dict)</td><td>计算字典元素个数，<br />即键的总数。</td><td>&gt;&gt;&gt; dict = {‘Name’: ‘py’, ‘Age’: 7, ‘Class’: ‘First’}<br />&gt;&gt;&gt; len(dict)<br />3</td></tr><tr><td>2</td><td>str(dict)</td><td>输出字典，<br />以可打印的字符串表示。</td><td>&gt;&gt;&gt; dict = {‘Name’: ‘py’, ‘Age’: 7, ‘Class’: ‘First’}<br />&gt;&gt;&gt; str(dict)<br />“{‘Name’: ‘py’, ‘Class’: ‘First’, ‘Age’: 7}”</td></tr><tr><td>3</td><td>type(variable)</td><td>返回输入的变量类型，<br />如果变量是字典<br />就返回字典类型。</td><td>&gt;&gt;&gt; dict = {‘Name’: ‘py’, ‘Age’: 7, ‘Class’: ‘First’}<br />&gt;&gt;&gt; type(dict)<br />&lt;class ‘dict’&gt;</td></tr></tbody></table></li><li><p>Python字典包含了以下内置方法：</p><table><thead><tr><th>序号</th><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>radiansdict.clear()</td><td>删除字典内所有元素</td></tr><tr><td>2</td><td>radiansdict.copy()</td><td>返回一个字典的浅复制</td></tr><tr><td>3</td><td>radiansdict.fromkeys()</td><td>创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td></tr><tr><td>4</td><td>radiansdict.get(key, default=None)</td><td>返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td>5</td><td>key in dict</td><td>如果键在字典dict里返回true，否则返回false</td></tr><tr><td>6</td><td>radiansdict.items()</td><td>以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td>7</td><td>radiansdict.keys()</td><td>以列表返回一个字典所有的键</td></tr><tr><td>8</td><td>radiansdict.setdefault(key, default=None)</td><td>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td>9</td><td>radiansdict.update(dict2)</td><td>把字典dict2的键/值对更新到dict里</td></tr><tr><td>10</td><td>radiansdict.values()</td><td>以列表返回字典中的所有值</td></tr><tr><td>11</td><td>pop(key[,default])</td><td>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td>12</td><td>popitem()</td><td>随机返回并删除字典中的一对键和值(一般删除末尾对)。</td></tr></tbody></table></li></ul>]]></content>
    
    
    <categories>
      
      <category>默认</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门-2.4 元组(Tuple)</title>
    <link href="/2020/12/25/python%E5%85%A5%E9%97%A8/2.4%20%E5%85%83%E7%BB%84-Tuple/"/>
    <url>/2020/12/25/python%E5%85%A5%E9%97%A8/2.4%20%E5%85%83%E7%BB%84-Tuple/</url>
    
    <content type="html"><![CDATA[<h1 id="2-4-元组（Tuple）"><a href="#2-4-元组（Tuple）" class="headerlink" title="2.4 元组（Tuple）"></a>2.4 元组（Tuple）</h1><p>元组（tuple）是 Python中另一个重要的序列结构，和列表类似，元组也是由一系列按特定顺序排序的元素组成。<br />元组和列表（list）的不同之处在于：</p><ul><li>列表的元素是可以更改的，包括修改元素值，删除和插入元素，所以列表是可变序列；</li><li>而元组一旦被创建，它的元素就不可更改了，所以元组是不可变序列。</li></ul><p>元组也可以看做是不可变的列表，通常情况下，元组用于保存无需修改的内容。<br /><br><br /><img src="http://oss.diorspo.cn/Fkp9Zg2NYYK2mqbXjnnV1ZEWBAsc" alt="元组格式"></p><ul><li>元组写在小括号()里，元素之间用逗号隔开。</li><li>元组中的元素类型也可以不相同</li></ul><h3 id="元组的创建与访问"><a href="#元组的创建与访问" class="headerlink" title="元组的创建与访问"></a>元组的创建与访问</h3><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span>tuple1 = ( <span class="hljs-string">&#x27;abcd&#x27;</span>, <span class="hljs-number">786</span> , <span class="hljs-number">2.23</span>, <span class="hljs-string">&#x27;demo&#x27;</span>, <span class="hljs-number">70.2</span>  )tinytuple = (<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;demo&#x27;</span>)tuple2 = <span class="hljs-built_in">tuple</span>(<span class="hljs-string">&quot;hello&quot;</span>)<span class="hljs-built_in">print</span> (tuple1)             <span class="hljs-comment"># 输出完整元组</span><span class="hljs-built_in">print</span> (tuple1[<span class="hljs-number">0</span>])          <span class="hljs-comment"># 输出元组的第一个元素</span><span class="hljs-built_in">print</span> (tuple1[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])        <span class="hljs-comment"># 输出从第二个元素开始到第三个元素</span><span class="hljs-built_in">print</span> (tuple1[<span class="hljs-number">2</span>:])         <span class="hljs-comment"># 输出从第三个元素开始的所有元素</span><span class="hljs-built_in">print</span> (tinytuple * <span class="hljs-number">2</span>)     <span class="hljs-comment"># 输出两次元组</span><span class="hljs-built_in">print</span> (tuple1 + tinytuple) <span class="hljs-comment"># 连接元组</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">输出结果：</span><span class="hljs-string">(&#x27;abcd&#x27;, 786, 2.23, &#x27;demo&#x27;, 70.2)</span><span class="hljs-string">abcd</span><span class="hljs-string">(786, 2.23)</span><span class="hljs-string">(2.23, &#x27;demo&#x27;, 70.2)</span><span class="hljs-string">(123, &#x27;demo&#x27;, 123, &#x27;demo&#x27;)</span><span class="hljs-string">(&#x27;abcd&#x27;, 786, 2.23, &#x27;demo&#x27;, 70.2, 123, &#x27;demo&#x27;)</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre><h4 id="修改元组的元素是非法的"><a href="#修改元组的元素是非法的" class="headerlink" title="修改元组的元素是非法的"></a>修改元组的元素是非法的</h4><pre><code class="hljs python">tup = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)tup[<span class="hljs-number">0</span>] = <span class="hljs-number">11</span>  <span class="hljs-comment"># 修改元组元素的操作是非法的</span></code></pre><ul><li>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。<pre><code class="hljs python">tup = ([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])tup[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>print(tup)</code></pre></li></ul><h4 id="构造空元组或单个元素元组"><a href="#构造空元组或单个元素元组" class="headerlink" title="构造空元组或单个元素元组"></a>构造空元组或单个元素元组</h4><ul><li>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：<pre><code class="hljs python">tup1 = ()    <span class="hljs-comment"># 空元组</span>tup2 = (<span class="hljs-number">20</span>,) <span class="hljs-comment"># 一个元素，需要在元素后添加逗号，否则会被识别为表达式运算</span></code></pre></li></ul><br /><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="元组运算符"><a href="#元组运算符" class="headerlink" title="元组运算符"></a>元组运算符</h4><ul><li>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。<table><thead><tr><th>Python 表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>len((1, 2, 3))</td><td>3</td><td>长度</td></tr><tr><td>(1, 2, 3) + (4, 5, 6)</td><td>(1, 2, 3, 4, 5, 6)</td><td>组合</td></tr><tr><td>(‘Hi!’) * 4</td><td>(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td>重复</td></tr><tr><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在于元组中</td></tr><tr><td>for x in (1, 2, 3): print(x, end=” “)</td><td>1 2 3</td><td>迭代</td></tr></tbody></table></li></ul><h4 id="元组索引，截取"><a href="#元组索引，截取" class="headerlink" title="　元组索引，截取"></a>　元组索引，截取</h4><ul><li>因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素</li><li>如下所示：L=(‘Google’, ‘Python’, ‘Taobao’)<table><thead><tr><th>Python</th><th>表达式 结果</th><th>描述</th></tr></thead><tbody><tr><td>L[2]</td><td>‘Taobao’</td><td>读取第三个元素</td></tr><tr><td>L[-2]</td><td>‘Python’</td><td>从右侧开始读取倒数第二个元素: count from the right</td></tr><tr><td>L[1:]</td><td>(‘Python’, ‘Taobao’)</td><td>输出从第二个元素开始后的所有元素</td></tr></tbody></table></li></ul><h4 id="元组内置函数"><a href="#元组内置函数" class="headerlink" title="元组内置函数"></a>元组内置函数</h4><ul><li>Python元组包含了以下内置函数:<table><thead><tr><th>序号</th><th>函数名称</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>len(tuple)</td><td>元组元素个数</td></tr><tr><td>2</td><td>max(tuple)</td><td>返回元组元素最大值</td></tr><tr><td>3</td><td>min(tuple)</td><td>返回元组元素最小值</td></tr><tr><td>4</td><td>tuple(seq)</td><td>将元组可迭代序列转化为元组</td></tr></tbody></table></li></ul>]]></content>
    
    
    <categories>
      
      <category>默认</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门-2.3 列表(List)</title>
    <link href="/2020/12/25/python%E5%85%A5%E9%97%A8/2.3%20%E5%88%97%E8%A1%A8-List/"/>
    <url>/2020/12/25/python%E5%85%A5%E9%97%A8/2.3%20%E5%88%97%E8%A1%A8-List/</url>
    
    <content type="html"><![CDATA[<h1 id="3-列表（List）"><a href="#3-列表（List）" class="headerlink" title="3. 列表（List）"></a>3. 列表（List）</h1><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>所谓序列，指的是一块<strong>可存放多个值的连续内存空间</strong>，这些值<strong>按一定顺序排列</strong>，可通过每个值所在位置的编号（称为索引）访问它们。</p><p>可以将它看做是一家旅店，那么店中的每个房间就如同序列存储数据的一个个内存空间，每个房间所特有的房间号就相当于索引值。也就是说，通过房间号（索引）我们可以找到这家旅店（序列）中的每个房间（内存空间）。<br /><br><br />在 Python中，序列类型包括<strong>字符串、列表、元组、集合和字典</strong>，这些序列支持以下几种通用的操作，但比较特殊的是，<strong>集合和字典不支持索引、切片、相加和相乘操作</strong>。(字符串也是一种序列，它也可以通过所以访问，并且支持切片等操作)</p><h3 id="序列操作"><a href="#序列操作" class="headerlink" title="序列操作"></a>序列操作</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>序列中，每个元素都有属于自己的编号（索引）。从起始元素开始，索引值从 0 开始递增，如图 1 所示。<br /><img src="http://oss.diorspo.cn/FkIQmItTPwMe_nYGLmt9gDurLcyC"><br />图 1 序列索引值示意图<br /><br><br />除此之外，Python 还支持索引值是负数，此类索引是从右向左计数，换句话说，从最后一个元素开始计数，从索引值 -1 开始，如图 2 所示。<br /><img src="http://oss.diorspo.cn/FsM3FYKkg2lGVNrW0nwyaR9zuLdI"><br />图 2 负值索引示意图<br /></p><h4 id="相加"><a href="#相加" class="headerlink" title="相加"></a>相加</h4><p>Python 中，支持两种类型相同的序列使用“+”运算符做相加操作，它会将两个序列进行连接，但不会去除重复元素。</p><h4 id="相乘"><a href="#相乘" class="headerlink" title="相乘"></a>相乘</h4><p>Python 中，使用数字 n 乘以一个序列会生成新的序列，其内容为原来序列被重复 n 次的结果。</p><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>切片操作是访问序列中元素的另一种方法，它可以访问一定范围内的元素，通过切片操作，可以生成一个新的序列。</p><pre><code class="hljs ada">sname[start : <span class="hljs-type">end</span> : <span class="hljs-type">step</span>]</code></pre><p>其中，各个参数的含义分别是：</p><ul><li>sname：表示序列的名称；</li><li>start：表示切片的开始索引位置（包括该位置），此参数也可以不指定，会默认为 0，也就是从序列的开头进行切片；</li><li>end：表示切片的结束索引位置（不包括该位置），如果不指定，则默认为序列的长度；</li><li>step：表示在切片过程中，隔几个存储位置（包含当前位置）取一次元素，也就是说，如果 step 的值大于 1，则在进行切片去序列元素时，会“跳跃式”的取元素。如果省略设置 step 的值，则最后一个冒号就可以省略。</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>在实际开发中，经常需要将一组（不只一个）数据存储起来，以便后边的代码使用。类似于数组（Array），它就可以把多个数据挨个存储到一起，通过数组下标可以访问数组中的每个元素。</p><p>需要明确的是，Python中没有数组，但是加入了更加强大的列表。<br />如果把数组看做是一个集装箱，那么 Python 的列表就是一个工厂的仓库。</p><ul><li>列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</li><li>列表是写在方括号<code>[]</code>之间、用逗号分隔开的元素列表。</li></ul><p><img src="http://oss.diorspo.cn/FtoHLvzGM7ULC6Bg1zVsjuAGOmpK" alt="列表结构"><br /></p><h4 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h4><p>（1）使用[]直接创建：使用<code>[ ]</code>创建列表后，一般使用<code>=</code>将它赋值给某个变量<br />（2）使用list()函数创建：Python 还提供了一个内置的函数 list()，使用它可以将其它数据类型转换为列表类型。<br /></p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span>list1 = [ <span class="hljs-string">&#x27;abcd&#x27;</span>, <span class="hljs-number">786</span> , <span class="hljs-number">2.23</span>, <span class="hljs-string">&#x27;demo&#x27;</span>, <span class="hljs-number">70.2</span> ]list2 = [<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;demo&#x27;</span>]list3 = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;hello&quot;</span>) <span class="hljs-comment"># list()函数创建列表，将字符串转换成列表</span><span class="hljs-built_in">print</span> (list3)            <span class="hljs-comment"># 输出完整列表</span><span class="hljs-built_in">print</span> (list1[<span class="hljs-number">0</span>])         <span class="hljs-comment"># 输出列表第一个元素</span><span class="hljs-built_in">print</span> (list1[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])       <span class="hljs-comment"># 从第二个开始输出到第三个元素</span><span class="hljs-built_in">print</span> (list1[<span class="hljs-number">2</span>:])        <span class="hljs-comment"># 输出从第三个元素开始的所有元素</span><span class="hljs-built_in">print</span> (list2 * <span class="hljs-number">2</span>)     <span class="hljs-comment"># 输出两次列表</span><span class="hljs-built_in">print</span> (list1 + list2)    <span class="hljs-comment"># 连接列表</span></code></pre><br /><h4 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h4><p>与Python字符串不一样的是，列表中的元素是可以改变的</p><ul><li>使用索引修改</li><li>通过切片批量修改<pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]a[<span class="hljs-number">0</span>] = <span class="hljs-number">9</span>a[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>] = [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>]print(a)</code></pre></li></ul><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>Python提供了内置函数append()和insert()来向列表中添加元素</p><ul><li>list.append(obj) 在列表末尾插入新的元素</li><li>list.insert(index, obj)在指定位置插入新的元素<pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]a.append(<span class="hljs-number">4</span>)a.insert(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)print(a)</code></pre></li></ul><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><ul><li>可以使用del关键字删除</li><li>可以通过切片赋空列表</li></ul><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]print(a)<span class="hljs-keyword">del</span> a[<span class="hljs-number">0</span>]print(a)<span class="hljs-keyword">del</span> a[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]print(a)a[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>] = []print(a)</code></pre><p><br />注意：</p><ul><li>1、List写在方括号之间，元素用逗号隔开。</li><li>2、和字符串一样，list可以被索引和切片。</li><li>3、List可以使用+操作符进行拼接。</li><li>4、List中的元素是可以改变的。</li></ul><h4 id="列表的遍历操作"><a href="#列表的遍历操作" class="headerlink" title="列表的遍历操作"></a>列表的遍历操作</h4><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>使用<span class="hljs-keyword">for</span>...<span class="hljs-keyword">in</span> 遍历列表    <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 列表：        使用变量<span class="hljs-number">2.</span>使用<span class="hljs-keyword">while</span>循环遍历列表    i = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> i&lt;len(列表):        使用列表中的元素(列表[i])        i += <span class="hljs-number">1</span><span class="hljs-number">3.</span>同等长度二级列表的遍历    列表 = [[值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>],[值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>],....]    <span class="hljs-keyword">for</span> 变量<span class="hljs-number">1</span>,变量<span class="hljs-number">2</span> <span class="hljs-keyword">in</span> 列表:        使用变量<span class="hljs-number">1</span>和变量<span class="hljs-number">2</span>    注意：变量<span class="hljs-number">1</span>取二级列表中的第一个值，变量<span class="hljs-number">2</span>取第二个值<span class="hljs-number">4.</span>非同等长度的二级列表的遍历    列表 = [[值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>]，[值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>,值<span class="hljs-number">3</span>],[值]...]    <span class="hljs-keyword">for</span> 变量<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> 列表：        <span class="hljs-keyword">for</span> 变量<span class="hljs-number">2</span> <span class="hljs-keyword">in</span> 变量<span class="hljs-number">1</span>：            使用变量<span class="hljs-number">2</span>(变量<span class="hljs-number">2</span>是二级列表中的每个值)</code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><pre><code class="hljs python">list1 = [ <span class="hljs-string">&#x27;abcd&#x27;</span>, <span class="hljs-number">786</span> , <span class="hljs-number">2.23</span>, <span class="hljs-string">&#x27;demo&#x27;</span>, <span class="hljs-number">70.2</span> ]<span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> list1:    print(item)</code></pre><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="Python列表脚本操作符："><a href="#Python列表脚本操作符：" class="headerlink" title="Python列表脚本操作符："></a>Python列表脚本操作符：</h4><ul><li>列表对 + 和 <em>的操作符与字符串相似。+ 号用于组合列表，</em> 号用于重复列表。<table><thead><tr><th>Python 表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>len([1, 2, 3])</td><td>3</td><td>长度</td></tr><tr><td>[1, 2, 3] + [4, 5, 6]</td><td>[1, 2, 3, 4, 5, 6]</td><td>组合</td></tr><tr><td>[‘Hi!’] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>重复</td></tr><tr><td>3 in [1, 2, 3]</td><td>True</td><td>元素是否存在于列表中</td></tr><tr><td>for x in [1, 2, 3]: print(x, end=” “)</td><td>1 2 3</td><td>迭代</td></tr></tbody></table></li></ul><h4 id="Python列表截取与拼接："><a href="#Python列表截取与拼接：" class="headerlink" title="　Python列表截取与拼接："></a>　Python列表截取与拼接：</h4><ul><li>Python的列表截取与字符串操作类型，如下所示：L=[‘Google’, ‘Python’, ‘Taobao’]<table><thead><tr><th>Python</th><th>表达式 结果</th><th>描述</th></tr></thead><tbody><tr><td>L[2]</td><td>‘Taobao’</td><td>读取第三个元素</td></tr><tr><td>L[-2]</td><td>‘Python’</td><td>从右侧开始读取倒数第二个元素: count from the right</td></tr><tr><td>L[1:]</td><td>[‘Python’, ‘Taobao’]</td><td>输出从第二个元素开始后的所有元素</td></tr></tbody></table></li></ul><h4 id="Python列表函数-amp-方法"><a href="#Python列表函数-amp-方法" class="headerlink" title="Python列表函数&amp;方法:"></a>Python列表函数&amp;方法:</h4><ul><li><p>Python包含以下函数:</p><table><thead><tr><th>序号</th><th>函数名称</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>len(list)</td><td>列表元素个数</td></tr><tr><td>2</td><td>max(list)</td><td>返回列表元素最大值</td></tr><tr><td>3</td><td>min(list)</td><td>返回列表元素最小值</td></tr><tr><td>4</td><td>list(seq)</td><td>将元组转换为列表</td></tr></tbody></table></li><li><p>list包含以下方法:</p><table><thead><tr><th>序号</th><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>list.append(obj)</td><td>在列表末尾添加新的对象</td></tr><tr><td>2</td><td>list.count(obj)</td><td>统计某个元素在列表中出现的次数</td></tr><tr><td>3</td><td>list.extend(seq)</td><td>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td>4</td><td>list.index(obj)</td><td>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>5</td><td>list.insert(index, obj)</td><td>将对象插入列表</td></tr><tr><td>6</td><td>list.pop(obj=list[-1])</td><td>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>7</td><td>list.remove(obj)</td><td>移除列表中某个值的第一个匹配项</td></tr><tr><td>8</td><td>list.reverse()</td><td>反向列表中元素</td></tr><tr><td>9</td><td>list.sort([func])</td><td>对原列表进行排序</td></tr><tr><td>10</td><td>list.clear()</td><td>清空列表</td></tr><tr><td>11</td><td>list.copy()</td><td>复制列表</td></tr></tbody></table></li></ul>]]></content>
    
    
    <categories>
      
      <category>默认</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门-2.2 字符串(String)</title>
    <link href="/2020/12/25/python%E5%85%A5%E9%97%A8/2.2%20%E5%AD%97%E7%AC%A6%E4%B8%B2-String/"/>
    <url>/2020/12/25/python%E5%85%A5%E9%97%A8/2.2%20%E5%AD%97%E7%AC%A6%E4%B8%B2-String/</url>
    
    <content type="html"><![CDATA[<h1 id="2-2-字符串（String）"><a href="#2-2-字符串（String）" class="headerlink" title="2.2 字符串（String）"></a>2.2 字符串（String）</h1><p>若干个字符的集合就是一个字符串。Python中的字符串必须由双引号<code>&quot; &quot;</code>或者单引号<code>&#39; &#39;</code>包围，具体格式为：</p><pre><code class="hljs python"><span class="hljs-string">&quot;字符串内容&quot;</span><span class="hljs-string">&#x27;字符串内容&#x27;</span></code></pre><p>字符串的内容可以包含字母、标点、特殊符号、中文、日文等全世界的所有文字。<br />下面都是合法的字符串：</p><ul><li>“123789”</li><li>“123abc”</li><li>“<a href="http://www.python.org/&quot;">http://www.python.org/&quot;</a></li><li>“今年是2020年啊”</li></ul><p>Python 字符串中的双引号和单引号没有任何区别。而有些编程语言的双引号字符串可以解析变量，单引号字符串一律原样输出，例如 <a href="http://c.biancheng.net/php/">PHP</a> 和 <a href="http://c.biancheng.net/js/">JavaScript</a>。</p><ul><li>注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。</li></ul><blockquote><p>如何处理字符串中的引号</p></blockquote><p>当字符串内容中出现引号时，我们需要进行特殊处理，否则 Python 会解析出错，例如下面不是一个合法的字符串</p><pre><code class="hljs python"><span class="hljs-string">&#x27;I&#x27;</span>m a great coder!<span class="hljs-string">&#x27;</span></code></pre><ul><li>使用转义&#39;, &quot;</li><li>使用不同的括号<pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;I\&#x27;m a great coder!&#x27;</span>str2 = <span class="hljs-string">&quot;I&#x27;m a great coder!&quot;</span>print(str1)print(str2)</code></pre></li></ul><blockquote><p>长字符串如何换行处理</p></blockquote><p>字符串过长，我们可以使用反斜杠，但是如果字符串本身也包含换行呢？</p><ul><li>转义\n</li><li>使用多引号<code>&quot;&quot;&quot; &quot;&quot;&quot;</code> 或<code>&#39;&#39;&#39; &#39;&#39;&#39;</code><pre><code class="hljs python">longstr = <span class="hljs-string">&#x27;&#x27;&#x27;It took me 6 months to write this Python tutorial.</span><span class="hljs-string">Please give me a to &#x27;thumb&#x27; to keep it updated.&#x27;&#x27;&#x27;</span>longstr2 = <span class="hljs-string">&quot;It took me 6 months to write this Python tutorial.\nPlease give me a to &#x27;thumb&#x27; to keep it updated.&quot;</span>print(longstr)print(longstr2)</code></pre></li></ul><h4 id="Python转义字符"><a href="#Python转义字符" class="headerlink" title="Python转义字符"></a>Python转义字符</h4><p>在需要在字符中使用特殊字符时，python 用反斜杠 <strong>\</strong> 转义字符。如下表：</p><table><thead><tr><th align="left">转义字符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">\(在行尾时)</td><td align="left">续行符</td><td align="left"></td></tr><tr><td align="left">\\</td><td align="left">反斜杠符号</td><td align="left">print(“\\“)，输出 \</td></tr><tr><td align="left">\‘</td><td align="left">单引号</td><td align="left">print(‘&#39;‘)，输出 ‘</td></tr><tr><td align="left">\“</td><td align="left">双引号</td><td align="left">print(“&quot;“)，输出 “</td></tr><tr><td align="left">\b</td><td align="left">退格(Backspace)</td><td align="left">print(“Hello \b World!”)，输出 Hello World!</td></tr><tr><td align="left">\000</td><td align="left">空</td><td align="left">print(“\000”)，输出</td></tr><tr><td align="left">\n</td><td align="left">换行</td><td align="left">print(“\n”)</td></tr><tr><td align="left">\v</td><td align="left">纵向制表符</td><td align="left">print(“Hello \v World!”)</td></tr><tr><td align="left">\t</td><td align="left">横向制表符</td><td align="left">print(“Hello \t World!”)</td></tr><tr><td align="left">\r</td><td align="left">回车</td><td align="left">print(“Hello\rWorld!”)</td></tr></tbody></table><p></p><h4 id="Python字符串运算符"><a href="#Python字符串运算符" class="headerlink" title="Python字符串运算符"></a>Python字符串运算符</h4><p>下表实例变量 a 值为字符串 “Hello”，b 变量值为 “Python”：</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">字符串连接</td><td align="left">a + b 输出结果： HelloPython</td></tr><tr><td align="left">*</td><td align="left">重复输出字符串</td><td align="left">a*2 输出结果：HelloHello</td></tr><tr><td align="left">[]</td><td align="left">通过索引获取字符串中字符</td><td align="left">a[1] 输出结果 <strong>e</strong></td></tr><tr><td align="left">[ : ]</td><td align="left">截取字符串中的一部分，遵循<strong>左闭右开</strong>原则，str[0:2] 是不包含第 3 个字符的。</td><td align="left">a[1:4] 输出结果 <strong>ell</strong></td></tr><tr><td align="left">in</td><td align="left">成员运算符 - 如果字符串中包含给定的字符返回 True</td><td align="left"><strong>‘H’ in a</strong> 输出结果 True</td></tr><tr><td align="left">not in</td><td align="left">成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td align="left"><strong>‘M’ not in a</strong> 输出结果 True</td></tr><tr><td align="left">r/R</td><td align="left">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 <strong>r</strong>（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td><td align="left">print( r’\n’ )，print( R’\n’ )</td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span>a = <span class="hljs-string">&quot;Hello&quot;</span>b = <span class="hljs-string">&quot;Python&quot;</span>print(<span class="hljs-string">&quot;a + b 输出结果：&quot;</span>, a + b)print(<span class="hljs-string">&quot;a * 2 输出结果：&quot;</span>, a * <span class="hljs-number">2</span>)print(<span class="hljs-string">&quot;a[1] 输出结果：&quot;</span>, a[<span class="hljs-number">1</span>])print(<span class="hljs-string">&quot;a[1:4] 输出结果：&quot;</span>, a[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])<span class="hljs-keyword">if</span>( <span class="hljs-string">&quot;H&quot;</span> <span class="hljs-keyword">in</span> a) :    print(<span class="hljs-string">&quot;H 在变量 a 中&quot;</span>)<span class="hljs-keyword">else</span> :    print(<span class="hljs-string">&quot;H 不在变量 a 中&quot;</span>)<span class="hljs-keyword">if</span>( <span class="hljs-string">&quot;M&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> a) :    print(<span class="hljs-string">&quot;M 不在变量 a 中&quot;</span>)<span class="hljs-keyword">else</span> :    print(<span class="hljs-string">&quot;M 在变量 a 中&quot;</span>)<span class="hljs-built_in">print</span> (<span class="hljs-string">r&#x27;\n&#x27;</span>)<span class="hljs-built_in">print</span> (<span class="hljs-string">R&#x27;\n&#x27;</span>)</code></pre><ul><li>以上实例输出结果为：<pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span> + b 输出结果： HelloPython<span class="hljs-keyword">a</span> * <span class="hljs-number">2</span> 输出结果： HelloHello<span class="hljs-keyword">a</span>[<span class="hljs-number">1</span>] 输出结果： e<span class="hljs-keyword">a</span>[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>] 输出结果： ellH 在变量 <span class="hljs-keyword">a</span> 中M 不在变量 <span class="hljs-keyword">a</span> 中\n\n</code></pre></li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><ul><li>注意：<ul><li>1、反斜杠可以用来转义，使用<code>r</code>可以让反斜杠不发生转义。</li><li>2、字符串可以用+运算符连接在一起，用<code>*</code>运算符重复。</li><li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>4、与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = ‘m’会导致错误。</li></ul></li></ul><h4 id="Python字符串格式化"><a href="#Python字符串格式化" class="headerlink" title="Python字符串格式化"></a>Python字符串格式化</h4><blockquote><p>Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。这在上一章内容已经介绍过，就不在赘述</p></blockquote><ul><li><p>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。</p></li><li><p>在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;我叫 %s 今年 %d 岁!&quot;</span> % (<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">10</span>))<span class="hljs-comment"># 以上实例输出结果：</span><span class="hljs-comment"># 我叫 小明 今年 10 岁!</span></code></pre></li><li><p>python字符串格式化符号:</p><table><thead><tr><th>符 号</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>格式化字符及其ASCII码</td></tr><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>%d</td><td>格式化整数</td></tr><tr><td>%u</td><td>格式化无符号整型</td></tr><tr><td>%o</td><td>格式化无符号八进制数</td></tr><tr><td>%x</td><td>格式化无符号十六进制数</td></tr><tr><td>%X</td><td>格式化无符号十六进制数（大写）</td></tr><tr><td>%f</td><td>格式化浮点数字，可指定小数点后的精度</td></tr><tr><td>%e</td><td>用科学计数法格式化浮点数</td></tr><tr><td>%E</td><td>作用同%e，用科学计数法格式化浮点数</td></tr><tr><td>%g</td><td>%f和%e的简写</td></tr><tr><td>%G</td><td>%f 和 %E 的简写</td></tr><tr><td>%p</td><td>用十六进制数格式化变量的地址</td></tr></tbody></table></li><li><p>格式化操作符辅助指令:</p><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>定义宽度或者小数点精度</td></tr><tr><td>-</td><td>用做左对齐</td></tr><tr><td>+</td><td>在正数前面显示加号( + )</td></tr><tr><td></td><td>在正数前面显示空格</td></tr><tr><td>#</td><td>在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td>0</td><td>显示的数字前面填充’0’而不是默认的空格</td></tr><tr><td>%</td><td>‘%%’输出一个单一的’%’</td></tr><tr><td>(var)</td><td>映射变量(字典参数)</td></tr><tr><td>m.n.</td><td>m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table></li></ul><h4 id="Python-的字符串内建函数"><a href="#Python-的字符串内建函数" class="headerlink" title="Python 的字符串内建函数:"></a>Python 的字符串内建函数:</h4><table><thead><tr><th>序号</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>capitalize()</td><td>将字符串的第一个字符转换为大写</td></tr><tr><td>2</td><td>center(width, fillchar)</td><td>返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</td></tr><tr><td>3</td><td>count(str, beg= 0,end=len(string))</td><td>返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td>4</td><td>bytes.decode(encoding=”utf-8”, errors=”strict”)</td><td>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td></tr><tr><td>5</td><td>encode(encoding=’UTF-8’,errors=’strict’)</td><td>以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td>6</td><td>endswith(suffix, beg=0, end=len(string))</td><td>检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td>7</td><td>expandtabs(tabsize=8)</td><td>把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</td></tr><tr><td>8</td><td>find(str, beg=0 end=len(string))</td><td>检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</td></tr><tr><td>9</td><td>index(str, beg=0, end=len(string))</td><td>跟find()方法一样，只不过如果str不在字符串中会报一个异常.</td></tr><tr><td>10</td><td>isalnum()</td><td>如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False</td></tr><tr><td>11</td><td>isalpha()</td><td>如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False</td></tr><tr><td>12</td><td>isdigit()</td><td>如果字符串只包含数字则返回 True 否则返回 False..</td></tr><tr><td>13</td><td>islower()</td><td>如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td>14</td><td>isnumeric()</td><td>如果字符串中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td>15</td><td>isspace()</td><td>如果字符串中只包含空白，则返回 True，否则返回 False.</td></tr><tr><td>16</td><td>istitle()</td><td>如果字符串是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td>17</td><td>isupper()</td><td>如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td>18</td><td>join(seq)</td><td>以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td>19</td><td>len(string)</td><td>返回字符串长度</td></tr><tr><td>20</td><td>ljust(width[, fillchar])</td><td>返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。</td></tr><tr><td>21</td><td>lower()</td><td>转换字符串中所有大写字符为小写.</td></tr><tr><td>22</td><td>lstrip()</td><td>截掉字符串左边的空格或指定字符。</td></tr><tr><td>23</td><td>maketrans()</td><td>创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td>24</td><td>max(str)</td><td>返回字符串 str 中最大的字母。</td></tr><tr><td>25</td><td>min(str)</td><td>返回字符串 str 中最小的字母。</td></tr><tr><td>26</td><td>replace(old, new [, max])</td><td>把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。</td></tr><tr><td>27</td><td>rfind(str, beg=0,end=len(string))</td><td>类似于 find()函数，不过是从右边开始查找.</td></tr><tr><td>28</td><td>rindex( str, beg=0, end=len(string))</td><td>类似于 index()，不过是从右边开始.</td></tr><tr><td>29</td><td>rjust(width,[, fillchar])</td><td>返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串</td></tr><tr><td>30</td><td>rstrip()</td><td>删除字符串字符串末尾的空格.</td></tr><tr><td>31</td><td>split(str=””, num=string.count(str))</td><td>num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num 个子字符串</td></tr><tr><td>32</td><td>splitlines([keepends])</td><td>按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td>33</td><td>startswith(str, beg=0,end=len(string))</td><td>检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。</td></tr><tr><td>34</td><td>strip([chars])</td><td>在字符串上执行 lstrip()和 rstrip()</td></tr><tr><td>35</td><td>swapcase()</td><td>将字符串中大写转换为小写，小写转换为大写</td></tr><tr><td>36</td><td>title()</td><td>返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td>37</td><td>translate(table, deletechars=””)</td><td>根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中</td></tr><tr><td>38</td><td>upper()</td><td>转换字符串中的小写字母为大写</td></tr><tr><td>39</td><td>zfill (width)</td><td>返回长度为 width 的字符串，原字符串右对齐，前面填充0</td></tr><tr><td>40</td><td>isdecimal()</td><td>检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>默认</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门-2.1 数字(Number)</title>
    <link href="/2020/12/25/python%E5%85%A5%E9%97%A8/2.1%20%E6%95%B0%E5%AD%97-Number/"/>
    <url>/2020/12/25/python%E5%85%A5%E9%97%A8/2.1%20%E6%95%B0%E5%AD%97-Number/</url>
    
    <content type="html"><![CDATA[<h1 id="2-1-数字（Number）"><a href="#2-1-数字（Number）" class="headerlink" title="2.1 数字（Number）"></a>2.1 数字（Number）</h1><h4 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h4><ul><li>Python3 支持 int、float、bool、complex（复数）。</li><li>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li>像大多数语言一样，数值类型的赋值和计算都是很直观的。<blockquote><p>注意：在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。<br>到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。</p></blockquote></li></ul><ul><li><p>当你指定一个值时，Number 对象就会被创建：</p><pre><code class="hljs python">var1 = <span class="hljs-number">1</span>var2 = <span class="hljs-number">10</span></code></pre></li><li><p>您也可以使用del语句删除一些对象引用。</p><ul><li>del语句的语法是：</li><li>del var1,var2….,varN</li></ul></li><li><p>您可以通过使用del语句删除单个或多个对象。例如</p><pre><code class="hljs python"><span class="hljs-keyword">del</span> var<span class="hljs-keyword">del</span> var_a, var_b</code></pre><h5 id="整数的进制"><a href="#整数的进制" class="headerlink" title="整数的进制:"></a>整数的进制:</h5><pre><code class="hljs bash"><span class="hljs-comment"># 输出其他进制数值</span>bin(255) <span class="hljs-comment">#255的二进制</span>oct(255) <span class="hljs-comment">#255的八进制</span>hex(255) <span class="hljs-comment">#255的十六进制</span>a=0b10   <span class="hljs-comment">#赋值二进制数值</span><span class="hljs-built_in">print</span>(a)a=0o10   <span class="hljs-comment">#赋值八进制数值</span><span class="hljs-built_in">print</span>(a)a=0x10   <span class="hljs-comment">#赋值十六进制数值</span><span class="hljs-built_in">print</span>(a)</code></pre></li></ul><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><table><thead><tr><th>函数</th><th>返回值 ( 描述 )</th></tr></thead><tbody><tr><td>abs(x)</td><td>返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td>ceil(x)</td><td>返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td>cmp(x, y)</td><td>如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。<br />Python 3 已废弃 。使用 使用 (x&gt;y)-(x&lt;y) 替换。</td></tr><tr><td>exp(x)</td><td>返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td>fabs(x)</td><td>返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td>floor(x)</td><td>返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td>log(x)</td><td>如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td>log10(x)</td><td>返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td>max(x1, x2,…)</td><td>返回给定参数的最大值，参数可以为序列。</td></tr><tr><td>min(x1, x2,…)</td><td>返回给定参数的最小值，参数可以为序列。</td></tr><tr><td>modf(x)</td><td>返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td>pow(x, y)</td><td><code>x**y</code> 运算后的值。</td></tr><tr><td>round(x [,n])</td><td>返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</td></tr><tr><td>sqrt(x)</td><td>返回数字x的平方根。</td></tr></tbody></table><h4 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>choice(seq)</td><td>从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td>randrange ([start,] stop [,step])</td><td>从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1</td></tr><tr><td>random()</td><td>随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td>seed([x])</td><td>改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td>shuffle(lst)</td><td>将序列的所有元素随机排序</td></tr><tr><td>uniform(x, y)</td><td>随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table><h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>acos(x)</td><td>返回x的反余弦弧度值。</td></tr><tr><td>asin(x)</td><td>返回x的反正弦弧度值。</td></tr><tr><td>atan(x)</td><td>返回x的反正切弧度值。</td></tr><tr><td>atan2(y, x)</td><td>返回给定的 X 及 Y 坐标值的反正切值。</td></tr><tr><td>cos(x)</td><td>返回x的弧度的余弦值。</td></tr><tr><td>hypot(x, y)</td><td>返回欧几里德范数 sqrt(x_x + y_y)。</td></tr><tr><td>sin(x)</td><td>返回的x弧度的正弦值。</td></tr><tr><td>tan(x)</td><td>返回x弧度的正切值。</td></tr><tr><td>degrees(x)</td><td>将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td></tr><tr><td>radians(x)</td><td>将角度转换为弧度</td></tr></tbody></table><h4 id="数学常量"><a href="#数学常量" class="headerlink" title="数学常量"></a>数学常量</h4><table><thead><tr><th>常量</th><th>描述</th></tr></thead><tbody><tr><td>pi</td><td>数学常量 pi（圆周率，一般以π来表示）</td></tr><tr><td>e</td><td>数学常量 e，e即自然常数（自然常数）。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>默认</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门-1.5 流程控制</title>
    <link href="/2020/12/10/python%E5%85%A5%E9%97%A8/1.5%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2020/12/10/python%E5%85%A5%E9%97%A8/1.5%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="1-5-流程控制"><a href="#1-5-流程控制" class="headerlink" title="1.5 流程控制"></a>1.5 流程控制</h1><p><a name="OTqkP"></a></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul><li><code>流程</code>: 计算机执行代码的顺序就是流程<br /></li><li><code>流程控制</code>: 对计算机代码执行顺序的管理就是流程控制<br /></li><li><code>流程分类</code>: 流程控制一共分为三类：<ul><li>顺序结构</li><li>分支结构/选择结构</li><li>循环结构</li></ul></li></ul><p><a name="E6KMN"></a></p><h2 id="分支-选择结构"><a href="#分支-选择结构" class="headerlink" title="分支/选择结构"></a>分支/选择结构</h2><p>Python的分支/选择结构是通过条件控制来实现。Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。<br />可以通过下图来简单了解条件语句的执行过程:<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606812460587-e3422bc9-6f2c-4b92-8464-b6d31cda86f2.png#align=left&display=inline&height=375&margin=%5Bobject%20Object%5D&name=image.png&originHeight=750&originWidth=684&size=81514&status=done&style=none&width=342"><br /><img src="http://oss.diorspo.cn/Fq4kprNYFs5E_xTNSNn2sN-GmUXp"><br /></p><p><a name="2h9Qy"></a></p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>Python中if语句的一般形式如下所示：</p><pre><code class="hljs python"><span class="hljs-keyword">if</span> condition_1:    statement_block_1<span class="hljs-keyword">elif</span> condition_2:    statement_block_2<span class="hljs-keyword">else</span>:    statement_block_3</code></pre><ul><li>如果 “condition_1” 为 True 将执行 “statement_block_1” 块语句</li><li>如果 “condition_1” 为False，将判断 “condition_2”</li><li>如果”condition_2” 为 True 将执行 “statement_block_2” 块语句</li><li>如果 “condition_2” 为False，将执行”statement_block_3”块语句</li></ul><p>Python 中用 <strong>elif</strong> 代替了 <strong>else if</strong>，所以if语句的关键字为：<strong>if – elif – else</strong>。<br /><strong>注意：</strong></p><ul><li>1、每个条件后面要使用冒号 **:**，表示接下来是满足条件后要执行的语句块。</li><li>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</li><li>3、在Python中没有switch – case语句。</li></ul><ul><li>分支结构一共分为4类：<ul><li>单项分支</li><li>双项分支</li><li>多项分支</li><li>巢状分支<br><a name="OJzDH"></a><h4 id=""><a href="#" class="headerlink" title=""></a></h4><a name="1Gy8P"></a></li></ul></li></ul><h4 id="1-单项分支"><a href="#1-单项分支" class="headerlink" title="(1) 单项分支"></a>(1) 单项分支</h4><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件表达式：    一条python语句...    一条python语句...    ...</code></pre><ul><li>特征：<ul><li>if条件表达式结果为真，则执行if之后所控制代码组，如果为假，则不执行后面的代码组（<code>:</code>后面的N行中有相同缩进的代码）</li><li><code>:</code>之后下一行的内容必须缩进，否则语法错误！</li><li>if之后的代码中如果缩进不一致，则不会if条件表达式是的控制，也不是单项分支的内容，是顺序结构的一部分</li><li>if<code>:</code>后面的代码是在条件表达式结果为真的情况下执行，所以称之为真区间或者if区间、<br><a name="oknvf"></a></li></ul></li></ul><h4 id="2-双项分支"><a href="#2-双项分支" class="headerlink" title="(2) 双项分支"></a>(2) 双项分支</h4><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件表达式：    一条python语句...    一条python语句...    ...<span class="hljs-keyword">else</span>:    一条python语句...    一条python语句...    ...</code></pre><ul><li>特征:<ul><li>1.双项分支有2个区间:分别是True控制的if区间和False控制的else区间（假区间）</li><li>2.if区间的内容在双项分支中必须都缩进，否则语法错误！<br><a name="Rzx63"></a></li></ul></li></ul><h4 id="3-多项分支"><a href="#3-多项分支" class="headerlink" title="(3) 多项分支"></a>(3) 多项分支</h4><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件表达式：    一条python语句...    一条python语句...    ...<span class="hljs-keyword">elif</span> 条件表达式：    一条python语句...    一条python语句...    ...<span class="hljs-keyword">elif</span> 条件表达式：    一条python语句...    一条python语句...    ......<span class="hljs-keyword">else</span>:    一条python语句...    一条python语句...</code></pre><ul><li>特征：<ul><li>1.多项分支可以添加无限个elif分支，无论如何只会执行一个分支</li><li>2.执行完一个分支后，分支结构就会结束，后面的分支都不会判断也不会执行</li><li>3.多项分支的判断顺序是自上而下逐个分支进行判断</li><li>4.在Python中没有switch – case语句。</li></ul></li><li>实例-演示了狗的年龄计算判断：<br /><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span>age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你家狗狗的年龄: &quot;</span>))print(<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">0</span>:    print(<span class="hljs-string">&quot;你是在逗我吧!&quot;</span>)<span class="hljs-keyword">elif</span> age == <span class="hljs-number">1</span>:    print(<span class="hljs-string">&quot;相当于 14 岁的人。&quot;</span>)<span class="hljs-keyword">elif</span> age == <span class="hljs-number">2</span>:    print(<span class="hljs-string">&quot;相当于 22 岁的人。&quot;</span>)<span class="hljs-keyword">elif</span> age &gt; <span class="hljs-number">2</span>:    human = <span class="hljs-number">22</span> + (age <span class="hljs-number">-2</span>)*<span class="hljs-number">5</span>    print(<span class="hljs-string">&quot;对应人类年龄: &quot;</span>, human)<span class="hljs-comment">### 退出提示</span><span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;点击 enter 键退出&quot;</span>)</code></pre><a name="ZKsEk"></a></li></ul><h4 id="4-巢状分支"><a href="#4-巢状分支" class="headerlink" title="(4) 巢状分支"></a>(4) 巢状分支</h4><ul><li>巢状分支是其他分支结构的嵌套结构，无论哪个分支都可以嵌套<pre><code class="hljs python"><span class="hljs-comment"># !/usr/bin/python3</span>num=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入一个数字：&quot;</span>))<span class="hljs-keyword">if</span> num%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:    <span class="hljs-keyword">if</span> num%<span class="hljs-number">3</span>==<span class="hljs-number">0</span>:        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;你输入的数字可以整除 2 和 3&quot;</span>)    <span class="hljs-keyword">else</span>:        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;你输入的数字可以整除 2，但不能整除 3&quot;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">if</span> num%<span class="hljs-number">3</span>==<span class="hljs-number">0</span>:        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;你输入的数字可以整除 3，但不能整除 2&quot;</span>)    <span class="hljs-keyword">else</span>:        <span class="hljs-built_in">print</span>  (<span class="hljs-string">&quot;你输入的数字不能整除 2 和 3&quot;</span>)</code></pre></li></ul><p><a name="csRZS"></a></p><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><ul><li>循环结构就是为了将相似或者相同的代码操作变得更见简洁，使得代码可以重复利用<br /></li><li>循环结构分为2类：<code>while</code>循环 和 <code>for..in</code>循环<br /></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606814338930-6dd2a96f-2776-42e0-9bff-8eb4dbfe27f9.png#align=left&display=inline&height=438&margin=%5Bobject%20Object%5D&name=image.png&originHeight=876&originWidth=726&size=64821&status=done&style=none&width=363"><br /></p><p><a name="i6gyD"></a></p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><pre><code class="hljs python">格式<span class="hljs-number">1</span>：    <span class="hljs-keyword">while</span> 条件表达式：        循环的内容        [变量的变化]格式<span class="hljs-number">2</span>：    <span class="hljs-keyword">while</span> 条件表达式：        循环的内容        [变量的变化]    <span class="hljs-keyword">else</span>:        python语句..</code></pre><blockquote><p>注意:while循环中的else是在while条件表达式为假的情况下执行的代码内容,一般用于判断起始条件是否为假等相关操作。</p></blockquote><pre><code class="hljs python"><span class="hljs-comment"># 计算1到100的总和</span>n = <span class="hljs-number">100</span><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>counter = <span class="hljs-number">1</span><span class="hljs-keyword">while</span> counter &lt;= n:    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + counter    counter += <span class="hljs-number">1</span><span class="hljs-keyword">else</span>:    print(<span class="hljs-string">&quot;计数已超过100，counter:&#123;&#125;，循环结束&quot;</span>.<span class="hljs-built_in">format</span>(counter))print(<span class="hljs-string">&quot;1 到 &#123;&#125; 之和为: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(n,<span class="hljs-built_in">sum</span>))</code></pre><p><a name="RtDZ9"></a></p><h3 id="for-…-in-循环"><a href="#for-…-in-循环" class="headerlink" title="for … in 循环"></a>for … in 循环</h3><ul><li><p>for…in 循环用于遍历容器类的数据（字符串，列表，元组，字典，集合）</p><pre><code class="hljs python">格式：    <span class="hljs-keyword">for</span>  变量  <span class="hljs-keyword">in</span>  容器：        python代码,可以在此使用变量格式<span class="hljs-number">2</span>：    <span class="hljs-keyword">for</span> 变量<span class="hljs-number">1</span>,变量<span class="hljs-number">2</span> <span class="hljs-keyword">in</span> 容器：        python代码,可以在此使用变量<span class="hljs-number">1</span>和变量<span class="hljs-number">2</span></code></pre></li><li><p>格式2要求遍历的容器必须是一下几种格式：</p><ul><li>[(),(),()] 列表中有元组</li><li>[[],[],[]] 列表中有列表</li><li>((),(),()) 元组中有元组</li><li>{(),(),()} 集合中有元组<pre><code class="hljs python">mylist = [(<span class="hljs-string">&quot;吕布&quot;</span>,<span class="hljs-string">&quot;貂蝉&quot;</span>),(<span class="hljs-string">&quot;周瑜&quot;</span>,<span class="hljs-string">&quot;小乔&quot;</span>),(<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-string">&quot;张飞&quot;</span>)]<span class="hljs-keyword">for</span> a,b <span class="hljs-keyword">in</span> mylist:    print(<span class="hljs-string">&quot;甲方：&#123;&#125;, 乙方：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(a,b))</code></pre></li></ul></li></ul><br /><pre><code class="hljs python">格式<span class="hljs-number">3</span>：    <span class="hljs-keyword">for</span>  变量  <span class="hljs-keyword">in</span>  容器：        python代码,可以在此使用变量    <span class="hljs-keyword">else</span>:        循环结束时执行的代码！</code></pre><p><a name="keojb"></a></p><h3 id="跳出循环：break，continue"><a href="#跳出循环：break，continue" class="headerlink" title="跳出循环：break，continue"></a>跳出循环：break，continue</h3><p><a name="xDLD6"></a></p><h4 id="break：跳出整个循环"><a href="#break：跳出整个循环" class="headerlink" title="break：跳出整个循环"></a>break：跳出整个循环</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606920977119-c60ed3f0-3e1c-43bc-93b7-20e03191a144.png#align=left&display=inline&height=428&margin=%5Bobject%20Object%5D&name=image.png&originHeight=428&originWidth=428&size=56728&status=done&style=none&width=428"><br /></p><p><a name="TIoNC"></a></p><h4 id="continue：跳出本次循环"><a href="#continue：跳出本次循环" class="headerlink" title="continue：跳出本次循环"></a>continue：跳出本次循环</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606921080471-20dfccc1-ad73-4f34-ba2f-1da474e7d66e.png#align=left&display=inline&height=417&margin=%5Bobject%20Object%5D&name=image.png&originHeight=417&originWidth=402&size=57602&status=done&style=none&width=402"><br /><br><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606921138189-ef9546c7-9184-4522-89bb-f5e5f5df2bb2.png#align=left&display=inline&height=399&margin=%5Bobject%20Object%5D&name=image.png&originHeight=798&originWidth=708&size=46451&status=done&style=none&width=354"><br /><br><br /><strong>break</strong> 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，<strong>任何对应的循环 else 块将不执行</strong>。<br /><strong>continue</strong> 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p><pre><code class="hljs python">n = <span class="hljs-number">5</span><span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:    n -= <span class="hljs-number">1</span>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">2</span>:        <span class="hljs-keyword">break</span>    print(n)<span class="hljs-keyword">else</span>:    print(<span class="hljs-string">&#x27;循环结束&#x27;</span>) <span class="hljs-comment">## 不会被执行</span>print(<span class="hljs-string">&#x27;运行结束&#x27;</span>)</code></pre><pre><code class="hljs python"><span class="hljs-comment">### 如何跳出多层循环？？？</span>m = <span class="hljs-number">1</span><span class="hljs-keyword">while</span> m &lt; <span class="hljs-number">6</span>:    n = <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> n &lt; <span class="hljs-number">6</span>:        <span class="hljs-keyword">if</span> n == <span class="hljs-number">2</span>:            <span class="hljs-keyword">break</span>        print(<span class="hljs-string">&quot;第&#123;&#125;次外循环 - 第&#123;&#125;次内循环&quot;</span>.<span class="hljs-built_in">format</span>(m,n))        n += <span class="hljs-number">1</span>    m += <span class="hljs-number">1</span>print(<span class="hljs-string">&#x27;运行结束&#x27;</span>)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门-1.4 运算符</title>
    <link href="/2020/12/10/python%E5%85%A5%E9%97%A8/1.4%20%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2020/12/10/python%E5%85%A5%E9%97%A8/1.4%20%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="1-4-运算符"><a href="#1-4-运算符" class="headerlink" title="1.4 运算符"></a>1.4 运算符</h1><p>什么是运算符？<br />运算符可以对一个值或多个值进行运算或各种操作<br />举个简单的例子 <code>a=4+5</code> 。 <br />例子中，4 和 5 被称为<strong>操作数</strong>，”+”和”=” 称为<strong>运算符</strong>。<br /></p><p><a name="R4I1S"></a></p><h2 id="Python中的运算符"><a href="#Python中的运算符" class="headerlink" title="Python中的运算符"></a>Python中的运算符</h2><p>Python语言支持以下类型的运算符:</p><ol><li>算术运算符</li><li>比较（关系）运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算符</li><li>成员运算符</li><li>身份运算符</li><li>运算符优先级</li></ol><p><a name="nJ4Uw"></a></p><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>以下假设变量a为10，变量b为21</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 31</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -11</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 210</td></tr><tr><td align="left">/</td><td align="left">除 - x 除以 y</td><td align="left">b / a 输出结果 2.1</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 1</td></tr><tr><td align="left">**</td><td align="left">幂 - 返回x的y次幂</td><td align="left">a**b 为10的21次方</td></tr><tr><td align="left">//</td><td align="left">取整除 - 向下取接近商的整数</td><td align="left">9//2 输出结果 4<br />-9//2 输出结果 -5</td></tr></tbody></table><pre><code class="hljs python">a = <span class="hljs-number">21</span>b = <span class="hljs-number">10</span>c = <span class="hljs-number">0</span> c = a + b<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1 - c 的值为：&quot;</span>, c) c = a - b<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;2 - c 的值为：&quot;</span>, c) c = a * b<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;3 - c 的值为：&quot;</span>, c) c = a / b<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;4 - c 的值为：&quot;</span>, c) c = a % b<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;5 - c 的值为：&quot;</span>, c) <span class="hljs-comment"># 修改变量 a 、b 、c</span>a = <span class="hljs-number">2</span>b = <span class="hljs-number">3</span>c = a**b <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;6 - c 的值为：&quot;</span>, c) a = <span class="hljs-number">10</span>b = <span class="hljs-number">5</span>c = a//b <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;7 - c 的值为：&quot;</span>, c)</code></pre><p><a name="ysf2"></a></p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">等于 - 比较对象是否相等</td><td align="left">(a == b) 返回 False。</td></tr><tr><td align="left">!=</td><td align="left">不等于 - 比较两个对象是否不相等</td><td align="left">(a != b) 返回 True。</td></tr><tr><td align="left">&gt;</td><td align="left">大于 - 返回x是否大于y</td><td align="left">(a &gt; b) 返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td><td align="left">(a &lt; b) 返回 True。</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于 - 返回x是否大于等于y。</td><td align="left">(a &gt;= b) 返回 False。</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于 - 返回x是否小于等于y。</td><td align="left">(a &lt;= b) 返回 True。</td></tr></tbody></table><pre><code class="hljs python">a = <span class="hljs-number">21</span>b = <span class="hljs-number">10</span>c = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> ( a == b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1 - a 等于 b&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1 - a 不等于 b&quot;</span>) <span class="hljs-keyword">if</span> ( a != b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;2 - a 不等于 b&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;2 - a 等于 b&quot;</span>) <span class="hljs-keyword">if</span> ( a &lt; b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;3 - a 小于 b&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;3 - a 大于等于 b&quot;</span>) <span class="hljs-keyword">if</span> ( a &gt; b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;4 - a 大于 b&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;4 - a 小于等于 b&quot;</span>) <span class="hljs-comment"># 修改变量 a 和 b 的值</span>a = <span class="hljs-number">5</span>b = <span class="hljs-number">20</span><span class="hljs-keyword">if</span> ( a &lt;= b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;5 - a 小于等于 b&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;5 - a 大于  b&quot;</span>) <span class="hljs-keyword">if</span> ( b &gt;= a ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;6 - b 大于等于 a&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;6 - b 小于 a&quot;</span>)</code></pre><p><a name="ysf3"></a></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">简单的赋值运算符</td><td align="left">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="left">+=</td><td align="left">加法赋值运算符</td><td align="left">c += a 等效于 c = c + a</td></tr><tr><td align="left">-=</td><td align="left">减法赋值运算符</td><td align="left">c -= a 等效于 c = c - a</td></tr><tr><td align="left">*=</td><td align="left">乘法赋值运算符</td><td align="left">c *= a 等效于 c = c * a</td></tr><tr><td align="left">/=</td><td align="left">除法赋值运算符</td><td align="left">c /= a 等效于 c = c / a</td></tr><tr><td align="left">%=</td><td align="left">取模赋值运算符</td><td align="left">c %= a 等效于 c = c % a</td></tr><tr><td align="left">**=</td><td align="left">幂赋值运算符</td><td align="left">c **= a 等效于 c = c ** a</td></tr><tr><td align="left">//=</td><td align="left">取整除赋值运算符</td><td align="left">c //= a 等效于 c = c // a</td></tr><tr><td align="left">:=</td><td align="left">海象运算符，可在表达式内部为变量赋值。<strong>Python3.8 版本新增运算符</strong>。</td><td align="left">在这个示例中，赋值表达式可以避免调用 len() 两次:if (n := len(a)) &gt; 10:</td></tr></tbody></table><pre><code>print(f&quot;List is too long (&#123;n&#125; elements, expected &lt;= 10)&quot;) |</code></pre><pre><code class="hljs python">a = <span class="hljs-number">21</span>b = <span class="hljs-number">10</span>c = <span class="hljs-number">0</span> c = a + b<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1 - c 的值为：&quot;</span>, c) c += a<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;2 - c 的值为：&quot;</span>, c) c *= a<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;3 - c 的值为：&quot;</span>, c) c /= a <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;4 - c 的值为：&quot;</span>, c) c = <span class="hljs-number">2</span>c %= a<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;5 - c 的值为：&quot;</span>, c) c **= a<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;6 - c 的值为：&quot;</span>, c) c //= a<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;7 - c 的值为：&quot;</span>, c)</code></pre><p><a name="yqimJ"></a></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">x and y</td><td align="left">布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td><td align="left">(a and b) 返回 20。</td></tr><tr><td align="left">or</td><td align="left">x or y</td><td align="left">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td align="left">(a or b) 返回 10。</td></tr><tr><td align="left">not</td><td align="left">not x</td><td align="left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="left">not(a and b) 返回 False</td></tr></tbody></table><pre><code class="hljs python">a = <span class="hljs-number">10</span>b = <span class="hljs-number">20</span> <span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">and</span> b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1 - 变量 a 和 b 都为 true&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1 - 变量 a 和 b 有一个不为 true&quot;</span>) <span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">or</span> b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;2 - 变量 a 和 b 都为 true，或其中一个变量为 true&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;2 - 变量 a 和 b 都不为 true&quot;</span>) <span class="hljs-comment"># 修改变量 a 的值</span>a = <span class="hljs-number">0</span><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">and</span> b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;3 - 变量 a 和 b 都为 true&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;3 - 变量 a 和 b 有一个不为 true&quot;</span>) <span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">or</span> b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;4 - 变量 a 和 b 都为 true，或其中一个变量为 true&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;4 - 变量 a 和 b 都不为 true&quot;</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span>( a <span class="hljs-keyword">and</span> b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;5 - 变量 a 和 b 都为 false，或其中一个变量为 false&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;5 - 变量 a 和 b 都为 true&quot;</span>)</code></pre><p><a name="ysf6"></a></p><h2 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h2><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">in</td><td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td align="left">not in</td><td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><pre><code class="hljs python">a = <span class="hljs-number">10</span>b = <span class="hljs-number">20</span><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ] <span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span> ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1 - 变量 a 在给定的列表中 list 中&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1 - 变量 a 不在给定的列表中 list 中&quot;</span>) <span class="hljs-keyword">if</span> ( b <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span> ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;2 - 变量 b 不在给定的列表中 list 中&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;2 - 变量 b 在给定的列表中 list 中&quot;</span>) <span class="hljs-comment"># 修改变量 a 的值</span>a = <span class="hljs-number">2</span><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span> ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;3 - 变量 a 在给定的列表中 list 中&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;3 - 变量 a 不在给定的列表中 list 中&quot;</span>)</code></pre><p><a name="ysf7"></a></p><h2 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h2><p>身份运算符用于比较两个对象的存储单元</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">is</td><td align="left">is 是判断两个标识符是不是引用自一个对象</td><td align="left"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td align="left">is not</td><td align="left">is not 是判断两个标识符是不是引用自不同对象</td><td align="left"><strong>x is not y</strong> ， 类似 **id(a) != id(b)**。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><p><strong>注：</strong> <a href="https://www.runoob.com/python/python-func-id.html">id()</a> 函数用于获取对象内存地址。<br /></p><pre><code class="hljs python">a = <span class="hljs-number">20</span>b = <span class="hljs-number">20</span> <span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">is</span> b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1 - a 和 b 有相同的标识&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1 - a 和 b 没有相同的标识&quot;</span>) <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">id</span>(a) == <span class="hljs-built_in">id</span>(b) ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;2 - a 和 b 有相同的标识&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;2 - a 和 b 没有相同的标识&quot;</span>) <span class="hljs-comment"># 修改变量 b 的值</span>b = <span class="hljs-number">30</span><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">is</span> b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;3 - a 和 b 有相同的标识&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;3 - a 和 b 没有相同的标识&quot;</span>) <span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> b ):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;4 - a 和 b 没有相同的标识&quot;</span>)<span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;4 - a 和 b 有相同的标识&quot;</span>)</code></pre><p><a name="e3Ehr"></a></p><h4 id="is-与-区别"><a href="#is-与-区别" class="headerlink" title="is 与 == 区别"></a>is 与 == 区别</h4><ul><li>is 用于判断两个变量引用对象是否为同一个</li><li>== 用于判断引用变量的值是否相等</li></ul><p><a name="ysf8"></a></p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>以下表格列出了从最高到最低优先级的所有运算符：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">**</td><td align="left">指数 (最高优先级)</td></tr><tr><td align="left">* / % //</td><td align="left">乘，除，求余数和取整除</td></tr><tr><td align="left">+ -</td><td align="left">加法减法</td></tr><tr><td align="left">&lt;= &lt; &gt; &gt;=</td><td align="left">比较运算符</td></tr><tr><td align="left">== !=</td><td align="left">等于运算符</td></tr><tr><td align="left">= %= /= //= -= += *= **=</td><td align="left">赋值运算符</td></tr><tr><td align="left">is is not</td><td align="left">身份运算符</td></tr><tr><td align="left">in not in</td><td align="left">成员运算符</td></tr><tr><td align="left">not and or</td><td align="left">逻辑运算符</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门-1.3 数据类型</title>
    <link href="/2020/12/08/python%E5%85%A5%E9%97%A8/1.3%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2020/12/08/python%E5%85%A5%E9%97%A8/1.3%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-3-数据类型"><a href="#1-3-数据类型" class="headerlink" title="1.3 数据类型"></a>1.3 数据类型</h1><p><a name="1G0fw"></a></p><h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><ul><li>Python3 中有六个标准的数据类型：<ul><li>Number（数字）<ul><li>int</li><li>bool</li><li>float</li><li>complex（复数）</li></ul></li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Sets（集合）</li><li>Dictionary（字典）</li></ul></li></ul><p><br />Python3 的六个标准数据类型中：</p><ul><li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组)；</li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。<blockquote><p><code>可变类型定义</code>:变量值改变但是变量地址不会改变<br><code>不可变类型定义</code>:变量值改变，变量地址必须改变</p></blockquote></li></ul><pre><code class="hljs python"><span class="hljs-comment"># 可变类型</span>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]print(<span class="hljs-built_in">id</span>(list1)) <span class="hljs-comment">#list1的内存地址</span>list2 = list1print(<span class="hljs-built_in">id</span>(list2)) <span class="hljs-comment">#list2的内存地址</span>list1.remove(<span class="hljs-number">1</span>)print(<span class="hljs-built_in">id</span>(list1), <span class="hljs-built_in">id</span>(list2)) <span class="hljs-comment">#修改值后的list1，list2的内存地址</span>print(list2)<span class="hljs-comment"># 不可变类型</span>str1 = <span class="hljs-string">&quot;点赞哦&quot;</span>str2 = str1print(<span class="hljs-built_in">id</span>(str1), <span class="hljs-built_in">id</span>(str2))str1 = <span class="hljs-string">&quot;这次一定&quot;</span>print(<span class="hljs-built_in">id</span>(str1), <span class="hljs-built_in">id</span>(str2))print(str1, str2)</code></pre><br /><a name="S8pWQ"></a>## 类型检查> 如何知道一个变量的类型呢？<ul><li>内置的 type() 函数可以用来查询变量所指的对象类型。（Python是面向对象的语言）</li><li>此外还可以用 isinstance 来判断<pre><code class="hljs python"><span class="hljs-comment"># 使用type()获取类型</span>a, b, c, d = <span class="hljs-number">20</span>, <span class="hljs-number">5.5</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">4</span>+<span class="hljs-number">3j</span>e = <span class="hljs-string">&quot;Demo&quot;</span>print(<span class="hljs-built_in">type</span>(a), <span class="hljs-built_in">type</span>(b), <span class="hljs-built_in">type</span>(c), <span class="hljs-built_in">type</span>(d), <span class="hljs-built_in">type</span>(e))<span class="hljs-comment"># 输出</span><span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt; &lt;class &#x27;float&#x27;&gt; &lt;class &#x27;bool&#x27;&gt; &lt;class &#x27;complex&#x27;&gt; &lt;class &#x27;str&#x27;&gt;</span><span class="hljs-comment"># isinstance()判断类型</span>a = <span class="hljs-number">111</span>print(<span class="hljs-built_in">isinstance</span>(a, <span class="hljs-built_in">int</span>))<span class="hljs-comment"># 输出</span><span class="hljs-comment"># True</span></code></pre></li></ul><p><a name="cSSdc"></a></p><h5 id="isinstance-和-type-的区别"><a href="#isinstance-和-type-的区别" class="headerlink" title="isinstance 和 type 的区别"></a>isinstance 和 type 的区别</h5><ul><li>type()不会认为子类是一种父类类型。</li><li>isinstance()会认为子类是一种父类类型。<pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span>    <span class="hljs-keyword">pass</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span>    <span class="hljs-keyword">pass</span>ans_1 = <span class="hljs-built_in">isinstance</span>(A(), A)  <span class="hljs-comment"># returns True</span>ans_2 = <span class="hljs-built_in">type</span>(A()) == A      <span class="hljs-comment"># returns True</span>ans_3 = <span class="hljs-built_in">isinstance</span>(B(), A)    <span class="hljs-comment"># returns True</span>ans_4 = <span class="hljs-built_in">type</span>(B()) == A        <span class="hljs-comment"># returns False</span>print(ans_1, ans_2, ans_3, ans_4)<span class="hljs-comment"># 输出</span><span class="hljs-comment"># True True True False</span></code></pre></li></ul><p><a name="cV1WB"></a></p><h2 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h2><ul><li>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</li><li>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值<table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x [,base])</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d 必须是一个序列 (key,value)元组。</td></tr><tr><td>frozenset(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>unichr(x)</td><td>将一个整数转换为Unicode字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table></li></ul><p><a name="8ba7f5f9"></a></p><h3 id="数据类型转换分类"><a href="#数据类型转换分类" class="headerlink" title="数据类型转换分类"></a>数据类型转换分类</h3><ul><li>数据类型转换一共分为2类：自动数据类型转换(隐式转换)和强制数据类型转换(显示转换)<br><a name="xDZik"></a></li></ul><h4 id="自动数据类型转换-隐式转换"><a href="#自动数据类型转换-隐式转换" class="headerlink" title="自动数据类型转换/隐式转换"></a>自动数据类型转换/隐式转换</h4><ul><li>自动类型转换是程序根据运算要求进行的转换，不需要人工干预 <ul><li>1.自动类型转换不需要人工干预 </li><li>2.自动类型转换多发生在运算或者判断过程中 </li><li>3.转化时向着更加精确的类型转换<pre><code class="hljs python">a = <span class="hljs-number">1.0</span>b = <span class="hljs-number">1</span>c = a + bprint(<span class="hljs-built_in">type</span>(a), <span class="hljs-built_in">type</span>(b), <span class="hljs-built_in">type</span>(c)</code></pre><a name="dR9zy"></a></li></ul></li></ul><h4 id="强制类型转换-显示转换"><a href="#强制类型转换-显示转换" class="headerlink" title="强制类型转换/显示转换"></a>强制类型转换/显示转换</h4><ul><li><p>根据程序需要，由编写程序人员人为改变数据类型的方式就是强制数据类型转换。<br /></p></li><li><p>int() 将其他类型转化为整型<br /></p><pre><code class="hljs yaml"><span class="hljs-number">1</span><span class="hljs-string">.数字整型转化之后，还是原来的味道</span><span class="hljs-number">2</span><span class="hljs-string">.浮点类型转化之后，舍去小数部分</span><span class="hljs-number">3</span><span class="hljs-string">.布尔值转化之后</span> <span class="hljs-literal">True</span> <span class="hljs-string">-&gt;</span> <span class="hljs-number">1</span> <span class="hljs-literal">False</span><span class="hljs-string">-&gt;0</span><span class="hljs-number">4</span><span class="hljs-string">.字符串转换，仅纯整型字符串可以转化（浮点型或者带有其他字符都不可以转化）</span><span class="hljs-number">5</span><span class="hljs-string">.复数不可以转换</span></code></pre></li><li><p>float() 将其他类型转化为浮点型</p><pre><code class="hljs yaml"><span class="hljs-number">1</span><span class="hljs-string">.整型转换之后变为浮点型，后面+.0</span><span class="hljs-number">2</span><span class="hljs-string">.浮点数不需要转化，转化也不会变化</span><span class="hljs-number">3</span><span class="hljs-string">.布尔值转化</span> <span class="hljs-literal">True</span><span class="hljs-string">-&gt;1.0</span>  <span class="hljs-literal">False</span> <span class="hljs-string">-&gt;0.0</span><span class="hljs-number">4</span><span class="hljs-string">.字符串，纯整型字符串和纯浮点型字符串可以转换，其他都不可以</span></code></pre></li><li><p>complex() 将其他数据转化为复数</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>整型转换之后变为 （整型+<span class="hljs-number">0</span>j）<span class="hljs-number">2.</span>浮点型转换之后变为(浮点型 + <span class="hljs-number">0</span>j)<span class="hljs-number">3.</span>布尔值转化之后 True-&gt;（<span class="hljs-number">1</span>+<span class="hljs-number">0</span>j） False(<span class="hljs-number">0</span>j)<span class="hljs-number">4.</span>字符串，纯整型和浮点型字符串可以转化，其他都不行<span class="hljs-number">5.</span>复数，无需转换</code></pre></li><li><p>bool() 将其他类型转化为布尔值</p><pre><code class="hljs yaml"><span class="hljs-comment">#下面转化为布尔值false的情况</span>    <span class="hljs-number">1</span><span class="hljs-string">.整型</span>   <span class="hljs-number">0</span>    <span class="hljs-number">2</span><span class="hljs-string">.浮点型</span>  <span class="hljs-number">0.0</span>    <span class="hljs-number">3</span><span class="hljs-string">.复数</span>  <span class="hljs-number">0</span><span class="hljs-string">+0j</span>    <span class="hljs-number">4</span><span class="hljs-string">.布尔</span>  <span class="hljs-literal">False</span>    <span class="hljs-number">5</span><span class="hljs-string">.字符串</span>  <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">空字符串</span>    <span class="hljs-number">6</span><span class="hljs-string">.列表</span>   [] <span class="hljs-string">空列表</span>    <span class="hljs-number">7</span><span class="hljs-string">.元组</span>   <span class="hljs-string">()空元组</span>    <span class="hljs-number">8</span><span class="hljs-string">.字典</span>   &#123;&#125; <span class="hljs-string">空字典</span>    <span class="hljs-number">9</span><span class="hljs-string">.集合</span>   <span class="hljs-string">set()</span> <span class="hljs-string">空集合</span></code></pre></li><li><p>str() 将其他类型转化为字符串</p><ul><li>所有转换均改变类型为字符串，表示方式依旧不变</li></ul></li><li><p>list() 将其他类型转化为列表类型</p><ul><li>在python中有5中可迭代序列，可以互相转换，他们分别是：</li><li>字符串，列表，元组，字典，集合<pre><code class="hljs python">var = (<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王老五&#x27;</span>)newvar = <span class="hljs-built_in">list</span>(var)newvar的值为 [<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王老五&#x27;</span>]</code></pre></li></ul></li><li><p><code>注意：</code></p><ul><li>1.字符串转换时每个字符变成列表中的一个值</li><li>2.字典类型转换时，仅将字典的键部分转换成列表，忽略值部分</li></ul></li><li><p>tuple() 将其他类型转化为元组类型<br /></p><pre><code class="hljs python">var = &#123;<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王老五&#x27;</span>&#125;newvar = <span class="hljs-built_in">tuple</span>(var)newvar的值为 (<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王老五&#x27;</span>)</code></pre></li><li><p><code>注意：</code></p><ul><li>1.字符串转换时每个字符变成元组中的一个值</li><li>2.字典类型转换时，仅将字典的键部分转换成元组，忽略值部分</li></ul></li><li><p>set（） 将其他类型转化为集合类型</p><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> = [<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王老五&#x27;</span>]<span class="hljs-keyword">new</span><span class="hljs-type">var</span> = <span class="hljs-keyword">set</span>(<span class="hljs-keyword">var</span>)<span class="hljs-keyword">new</span><span class="hljs-type">var</span>的值为 &#123;<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王老五&#x27;</span>&#125;  <span class="hljs-meta">#值的顺序不定</span></code></pre></li><li><p><code>注意：</code></p><ul><li>1.字符串转换时每个字符变成集合中的一个值</li><li>2.字典类型转换时，仅将字典的键部分转换集合，忽略值部分</li></ul></li><li><p>dict() 将其他类型转换为字典类型</p></li><li><p>其他类型转化为字典时需要按照指定的格式才可以转化：（列表和元组的组合可以）</p><pre><code class="hljs scheme">[[<span class="hljs-symbol">&#x27;cat</span>&#x27;, <span class="hljs-symbol">&#x27;黑猫警长</span>&#x27;], [<span class="hljs-symbol">&#x27;mouse</span>&#x27;, <span class="hljs-symbol">&#x27;一只耳</span>&#x27;], [<span class="hljs-symbol">&#x27;next</span>&#x27;, <span class="hljs-symbol">&#x27;请看夏季</span>&#x27;]][(<span class="hljs-symbol">&#x27;cat</span>&#x27;, <span class="hljs-symbol">&#x27;黑猫警长</span>&#x27;), （<span class="hljs-symbol">&#x27;mouse</span>&#x27;, <span class="hljs-symbol">&#x27;一只耳</span><span class="hljs-symbol">&#x27;）</span>, （<span class="hljs-symbol">&#x27;next</span>&#x27;, <span class="hljs-symbol">&#x27;请看夏季</span><span class="hljs-symbol">&#x27;）</span>]</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门系列-写在前面</title>
    <link href="/2020/12/08/python%E5%85%A5%E9%97%A8/Python%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/"/>
    <url>/2020/12/08/python%E5%85%A5%E9%97%A8/Python%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p><img src="http://oss.diorspo.cn/Fpdl2F28wgb-5Q6s9EkFs8mC9RMy">  </p><p>上上周，由黄老师介绍了一个去企业讲授Python入门课程的活，这个活是一个培训机构找过来的，他们专门给各类政府企业单位的人提供各种各样的IT培训课程，讲师都是从业内找一些经验丰富的从业人员来签约授课，黄老师以前给他们讲过几次课，所以找过来。这次可能是因为黄老师看不上这点小钱，也可能是知道了我“穷”的现状，将这个活计推给了我。</p><p>讲道理，虽然我一直有过搞编程培训班的想法，但我想的是搞少儿编程，还真没想过给企业里的工程师讲课，毕竟我自己也是个小菜鸡，万一别人来一句“配钥匙5元一把，您配吗？”，岂不是很尴尬？</p><p><img src="http://oss.diorspo.cn/FvmqczbAavwvOUzmQL07KthhhnHO"></p><p>不过黄老师一直给我鼓气说没问题的，受众是一群没有多少软件研发经验的工程师，他们平时主要接触的都是电力设备的运维，极少数了解一些C++相关的知识，并没有实际编码的经验。因此，我也就硬着头皮上了，花了一周的时间自己复习了一下Python的基础知识，并且准备了一份讲义，毕竟不能给黄老师丢人。   </p><p>准备时间只有一周，做PPT太耗费时间，实习期间习惯了使用语雀写文档，语雀的演示模式也挺好用，在和培训机构以及客户沟通之后，同意了使用语雀文档进行教学。所以我就边复习、边学习、边写文档，完成了一份Python入门的讲义。  </p><p><img src="http://oss.diorspo.cn/Fu5CO9HFTFtZ-w_Fw3vZVFJAk6iI">  </p><p>讲义准备毕竟也花了不少精力，讲课效果也还不错，作为一次性用品似乎有点浪费，所以想到干脆也放到博客来，因此，博客的计划中先得插播一些Python入门的文章。   </p><p>由于是从语雀导出Markdown移植过来的，格式上或许有一些没有仔细核对的地方，请读者见谅～ 另外，讲义是针对入门学习者准备的，内容比较基础，大佬勿喷哦⚠️   </p><p>后面会根据讲义的章节顺序更新到博客上来，目录如下，有兴趣的朋友也可以直接阅读<a href="https://www.yuque.com/books/share/dc8ddc73-c071-404d-b58d-bcbc18933e02#">语雀文档</a>。  </p><p><img src="http://oss.diorspo.cn/Fi0J1mwFjtgFzNY1PD6jQ52gITYz"></p>]]></content>
    
    
    <categories>
      
      <category>默认</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门-1.2 基础语法入门</title>
    <link href="/2020/12/08/python%E5%85%A5%E9%97%A8/1.2%20%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <url>/2020/12/08/python%E5%85%A5%E9%97%A8/1.2%20%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-2-基础语法入门"><a href="#1-2-基础语法入门" class="headerlink" title="1.2 基础语法入门"></a>1.2 基础语法入门</h1><p><a name="Tbm4p"></a></p><h2 id="明确几个基本概念"><a href="#明确几个基本概念" class="headerlink" title="明确几个基本概念"></a>明确几个基本概念</h2><p><a name="Qe41y"></a></p><h5 id="（1）表达式"><a href="#（1）表达式" class="headerlink" title="（1）表达式"></a>（1）表达式</h5><p>        表达式就是一个类似于数学公式的东西<br />        比如：10 + 5   8 - 4<br />        表达式一般仅仅用了计算一些结果，不会对程序产生实质性的影响<br />        如果在交互模式中输入一个表达式，解释器会自动将表达式的结果输出<br><a name="6pVB7"></a></p><h5 id="（2）语句"><a href="#（2）语句" class="headerlink" title="（2）语句"></a>（2）语句</h5><p>        在程序中语句一般需要完成某种功能，比如打印信息、获取信息、为变量赋值。<br />        比如：</p><pre><code class="hljs python">print()<span class="hljs-built_in">input</span>()a = <span class="hljs-number">10</span></code></pre><p>        语句的执行一般会对程序产生一定的影响<br />        在交互模式中不一定会输出语句的执行结果  <br><a name="ZsTfB"></a></p><h5 id="（3）程序（program）"><a href="#（3）程序（program）" class="headerlink" title="（3）程序（program）"></a>（3）程序（program）</h5><p>        程序就是由一条一条的语句和一条一条的表达式构成的。<br><a name="DsnRP"></a></p><h5 id="（4）函数（function）"><a href="#（4）函数（function）" class="headerlink" title="（4）函数（function）"></a>（4）函数（function）</h5><p>        函数就是一种语句，函数专门用来完成特定的功能<br />        函数长的形如：xxx()          <br />        函数的分类：<br />            内置函数<br />                - 由Python解释器提供的函数，可以在Python中直接使用<br />            自定义函数    <br />                - 由程序员自主的创建的函数<br />        当我们需要完成某个功能时，就可以去调用内置函数，或者自定义函数<br />        函数的两个要素：<br />            参数<br />                - ()中的内容就是函数的参数<br />                - 函数中可以没有参数，也可以有多个参数，多个参数之间使用,隔开<br />            返回值        <br />                - 返回值是函数的返回结果，不是所有的函数都有返回值<br /></p><p><a name="Hn2ZT"></a></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><a name="iGvjC"></a></p><h3 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a>第一个Python程序</h3><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: cp-1252 -*-</span><span class="hljs-comment"># Python文件首行可以指定编码格式，Python3默认是utf-8</span>print(<span class="hljs-string">&quot;Hello World&quot;</span>) <span class="hljs-comment"># 打印Hello World</span>print(<span class="hljs-string">&quot;Hello, everyone!\n \</span><span class="hljs-string">I am so glad to introduce Python to you!&quot;</span>)a = <span class="hljs-literal">True</span><span class="hljs-keyword">if</span> a:print(<span class="hljs-string">&quot;True&quot;</span>)<span class="hljs-keyword">else</span>:print(<span class="hljs-string">&quot;False&quot;</span>)</code></pre><ul><li>在Python中严格区分大小写</li><li>Python中的每一行就是一条语句，每条语句以换行结束</li><li>Python中每一行语句不要过长（规范中建议每行不要超过80个字符）</li><li>一条语句可以分多行编写，多行编写时语句后边以”&quot;结尾  </li><li>Python是缩进严格的语言，以缩进来表示代码块，所以在Python中不要随便写缩进  </li><li>在Python中使用#来表示注释，”#”后的内容都属于注释，注释的内容将会被解释器所忽略</li></ul><p><a name="fLhD9"></a></p><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p><a name="LhHML"></a></p><h5 id="input-输入："><a href="#input-输入：" class="headerlink" title="input()输入："></a>input()输入：</h5><ul><li><p>input()的小括号中放入的是，提示信息，用来在获取数据之前给用户的一个简单提示</p></li><li><p>input()在从键盘获取了数据以后，会存放到等号右边的变量中</p></li><li><p>input()会把用户输入的任何值都作为字符串来对待</p></li><li><p>注意：在python2中还有一个raw_input()输入，但到python3中没有了</p><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入：&quot;</span>);<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;你输入的内容是: &quot;</span>, <span class="hljs-built_in">str</span>)</code></pre><p><a name="NtZDW"></a></p><h5 id="print-输出："><a href="#print-输出：" class="headerlink" title="print()输出："></a>print()输出：</h5></li><li><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=””</p><pre><code class="hljs python">x=<span class="hljs-string">&quot;a&quot;</span>y=<span class="hljs-string">&quot;b&quot;</span><span class="hljs-comment"># 换行输出</span>print( x )print( y )print(<span class="hljs-string">&#x27;---------&#x27;</span>)<span class="hljs-comment"># 不换行输出</span>print( x, end=<span class="hljs-string">&quot; &quot;</span> )print( y, end=<span class="hljs-string">&quot; &quot;</span> )print()<span class="hljs-comment"># 同时输出多个变量</span>print(x,y)</code></pre><p><a name="yijxN"></a></p><h5 id="format格式化函数："><a href="#format格式化函数：" class="headerlink" title="format格式化函数："></a>format格式化函数：</h5></li><li><p>格式化字符串的函数 str.format()，它增强了字符串格式化的功能</p></li><li><p>基本语法是通过 {} 和 : 来代替以前的 % 。</p><pre><code class="hljs python"><span class="hljs-comment"># 不设置指定位置，按默认顺序</span>template = <span class="hljs-string">&quot;name: &#123;&#125;, age: &#123;&#125;&quot;</span>print(template.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;18&quot;</span>))<span class="hljs-comment"># 设置指定位置</span>template = <span class="hljs-string">&quot;name: &#123;0&#125;, age: &#123;1&#125; \nWelcome, &#123;0&#125;&quot;</span>print(template.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>))<span class="hljs-comment"># 设置指定参数名</span>template = <span class="hljs-string">&quot;name: &#123;name&#125;, age: &#123;age&#125;&quot;</span>print(template.<span class="hljs-built_in">format</span>(name=<span class="hljs-string">&quot;John&quot;</span>, age=<span class="hljs-string">&quot;18&quot;</span>))<span class="hljs-comment"># 通过字典设置参数</span>template = <span class="hljs-string">&quot;name: &#123;name&#125;, age: &#123;age&#125;&quot;</span>john = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;18&quot;</span>&#125;print(template.<span class="hljs-built_in">format</span>(**john)) <span class="hljs-comment"># **表示接收的参数作为字典来处理，*表示接收的参数作为元组来处理</span><span class="hljs-comment"># 通过列表索引设置参数</span>my_list = [<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>]template = <span class="hljs-string">&quot;name: &#123;0[0]&#125;, age: &#123;0[1]&#125;&quot;</span> <span class="hljs-comment"># 第一个数字0，用于表示format参数，可以传入多个列表参数，中括号中表示数组下标</span>print(template.<span class="hljs-built_in">format</span>(my_list))<span class="hljs-comment"># 练习：尝试混用上述方式~</span><span class="hljs-comment"># 数字格式化</span>print(<span class="hljs-string">&quot;PI: &#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3.1415926</span>))</code></pre></li></ul><table><thead><tr><th>数字</th><th>格式</th><th>输出</th><th>描述</th></tr></thead><tbody><tr><td>3.1415926</td><td>{:.2f}</td><td>3.14</td><td>保留小数点后两位</td></tr><tr><td>3.1415926</td><td>{:+.2f}</td><td>+3.14</td><td>带符号保留小数点后两位</td></tr><tr><td>-1</td><td>{:+.2f}</td><td>-1.00</td><td>带符号保留小数点后两位</td></tr><tr><td>2.71828</td><td>{:.0f}</td><td>3</td><td>不带小数</td></tr><tr><td>5</td><td>{:0&gt;2d}</td><td>05</td><td>数字补零 (填充左边, 宽度为2)</td></tr><tr><td>5</td><td>{:x&lt;4d}</td><td>5xxx</td><td>数字补x (填充右边, 宽度为4)</td></tr><tr><td>10</td><td>{:x&lt;4d}</td><td>10xx</td><td>数字补x (填充右边, 宽度为4)</td></tr><tr><td>1000000</td><td>{:,}</td><td>1,000,000</td><td>以逗号分隔的数字格式</td></tr><tr><td>0.25</td><td>{:.2%}</td><td>25.00%</td><td>百分比格式</td></tr><tr><td>1000000000</td><td>{:.2e}</td><td>1.00e+09</td><td>指数记法</td></tr><tr><td>13</td><td>{:10d}</td><td>13</td><td>右对齐 (默认, 宽度为10)</td></tr><tr><td>13</td><td>{:&lt;10d}</td><td>13</td><td>左对齐 (宽度为10)</td></tr><tr><td>13</td><td>{:^10d}</td><td>13</td><td>中间对齐 (宽度为10)</td></tr><tr><td>11</td><td>‘{:b}’.format(11)<br />‘{:d}’.format(11)<br />‘{:o}’.format(11)<br />‘{:x}’.format(11)<br />‘{:#x}’.format(11)<br />‘{:#X}’.format(11)</td><td>1011<br />11<br />13<br />b<br />0xb<br />0XB</td><td>进制</td></tr></tbody></table><p><a name="ee656aa1"></a></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>python中单行注释采用 # 开头。<pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><span class="hljs-comment"># 文件名：test.py</span><span class="hljs-comment"># 第一个注释</span>print(<span class="hljs-string">&quot;Hello, Python!&quot;</span>);  <span class="hljs-comment"># 第二个注释</span></code></pre>输出结果：<pre><code class="hljs python">Hello, Python!</code></pre></li></ul><p><br />注释可以在语句或表达式行末：</p><pre><code class="hljs python">name = <span class="hljs-string">&quot;Madisetti&quot;</span> <span class="hljs-comment"># 这是一个注释</span></code></pre><ul><li><p>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)。</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><span class="hljs-comment"># 文件名：test.py</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">这是多行注释，使用单引号。</span><span class="hljs-string">这是多行注释，使用单引号。</span><span class="hljs-string">这是多行注释，使用单引号。</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">这是多行注释，使用双引号。</span><span class="hljs-string">这是多行注释，使用双引号。</span><span class="hljs-string">这是多行注释，使用双引号。</span><span class="hljs-string">&quot;&quot;&quot;</span></code></pre><p><a name="XLGj5"></a></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><a name="qClRL"></a></p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3></li><li><p>在Python里, <code>标识符: 由字母、数字、下划线组成,但不能以数字开头</code>。  <br /></p></li><li><p>Python 中的标识符是区分大小写的。<br /></p></li><li><p>特殊标识符：</p><ul><li>以下划线开头的标识符是有特殊意义的。以单下划线开头 <code>_foo</code> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 <code>from xxx import *</code> 而导入；<br /></li><li>以双下划线开头的 <code>__foo</code> 代表类的私有成员；以双下划线开头和结尾的 <code>__foo__</code> 代表 Python 里特殊方法专用的标识，如 <code>__init__()</code> 代表类的构造函数。<br /></li></ul></li><li><p>python保留字： 保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> keyword<span class="hljs-meta">&gt;&gt;&gt; </span>keyword.kwlist[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;as&#x27;</span>, <span class="hljs-string">&#x27;assert&#x27;</span>, <span class="hljs-string">&#x27;break&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;continue&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;del&#x27;</span>, <span class="hljs-string">&#x27;elif&#x27;</span>, <span class="hljs-string">&#x27;else&#x27;</span>, <span class="hljs-string">&#x27;except&#x27;</span>, <span class="hljs-string">&#x27;finally&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;lambda&#x27;</span>, <span class="hljs-string">&#x27;nonlocal&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;pass&#x27;</span>, <span class="hljs-string">&#x27;raise&#x27;</span>, <span class="hljs-string">&#x27;if&#x27;</span>,<span class="hljs-string">&#x27;return&#x27;</span>,<span class="hljs-string">&#x27;try&#x27;</span>, <span class="hljs-string">&#x27;while&#x27;</span>, <span class="hljs-string">&#x27;with&#x27;</span>, <span class="hljs-string">&#x27;yield&#x27;</span>]</code></pre></li></ul><p><a name="K7Zco"></a></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</li><li>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。<br /></li><li>等号（=）用来给变量赋值。<br /></li><li>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：<br /><pre><code class="hljs python">counter = <span class="hljs-number">100</span>          <span class="hljs-comment"># 整型变量</span>miles   = <span class="hljs-number">1000.0</span>       <span class="hljs-comment"># 浮点型变量</span>name    = <span class="hljs-string">&quot;demo&quot;</span>     <span class="hljs-comment"># 字符串</span>print(counter)print(miles)print(name)</code></pre>执行以上程序会输出如下结果：<pre><code class="hljs angelscript"><span class="hljs-number">100</span><span class="hljs-number">1000.0</span>demo</code></pre></li></ul><blockquote><p>TIPS:</p><ol><li>变量命名应既简短又具有描述性。例如，name比n好，student_name比s_n好。</li><li>慎用小写字母l和大写字母O，它们很容易被看错成数字1和0</li></ol></blockquote><ul><li><p>Python允许你同时为多个变量赋值。例如：</p><pre><code class="hljs python">a = b = c = <span class="hljs-number">1</span></code></pre></li><li><p>以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。</p></li></ul><ul><li><p>您也可以为多个对象指定多个变量。例如：</p><pre><code class="hljs python">a, b, c = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;demo&quot;</span></code></pre></li><li><p>以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 “demo” 分配给变量 c。</p></li></ul><br /><p><a name="avDhA"></a></p><h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><ul><li><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号({})。</p></li><li><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：</p><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)</code></pre></li><li><p>以下代码最后一行语句缩进数的空格数不一致，会导致运行错误：</p><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)  <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)    <span class="hljs-comment"># 缩进不一致，会导致运行错误</span></code></pre></li><li><p>以上程序由于缩进不一致，执行后会出现类似以下错误：</p><pre><code class="hljs bash">File <span class="hljs-string">&quot;test.py&quot;</span>, line 6    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)    <span class="hljs-comment"># 缩进不一致，会导致运行错误</span>                                      ^IndentationError: unindent does not match any outer indentation level</code></pre></li></ul><p><a name="Y7deq"></a></p><h5 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h5><ul><li>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：<pre><code class="hljs python">total = item_one + \        item_two + \        item_three</code></pre></li></ul><ul><li>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：<pre><code class="hljs python">total = [<span class="hljs-string">&#x27;item_one&#x27;</span>, <span class="hljs-string">&#x27;item_two&#x27;</span>, <span class="hljs-string">&#x27;item_three&#x27;</span>,        <span class="hljs-string">&#x27;item_four&#x27;</span>, <span class="hljs-string">&#x27;item_five&#x27;</span>]</code></pre><a name="xXVLq"></a><br><a name="E9gRm"></a></li></ul><h5 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h5><ul><li>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br /></li><li>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。<br /></li><li>记住：空行也是程序代码的一部分。<br /></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门-1.1Python简介与环境搭建</title>
    <link href="/2020/12/08/python%E5%85%A5%E9%97%A8/1.1%20Python%E7%AE%80%E4%BB%8B%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/12/08/python%E5%85%A5%E9%97%A8/1.1%20Python%E7%AE%80%E4%BB%8B%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="1-1-Python简介与环境搭建"><a href="#1-1-Python简介与环境搭建" class="headerlink" title="1.1 Python简介与环境搭建"></a>1.1 Python简介与环境搭建</h1><p><a name="zEV1U"></a></p><h2 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h2><p><strong>Python</strong>是一种广泛使用的<a href="https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80"><strong>解释型</strong></a><strong>、高级编程、通用型编程语言</strong>功能，能够自动管理内存使用，并且其本身拥有一个巨大而广泛的标准库。<br /><br />Python由<a href="https://zh.wikipedia.org/wiki/%E5%90%89%E5%A4%9A%C2%B7%E8%8C%83%E7%BD%97%E8%8B%8F%E5%A7%86">吉多·范罗苏姆</a>创造，第一版发布于1991年。<br /><br><br />Python的设计哲学强调代码的<strong>可读性和简洁</strong>的语法，尤其是使用<a href="https://zh.wikipedia.org/wiki/%E8%B6%8A%E4%BD%8D%E8%A7%84%E5%88%99">空格缩进</a>划分代码块。相比于C或Java，Python让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。<br /></p><blockquote><p><strong>Life is short, you need python. （人生苦短，我用Python。）</strong><br><strong>—— Bruce Eckel（《Thinking in Java》《Thinking in C++》等书作者）</strong></p></blockquote><p><a name="JN9FK"></a></p><h3 id="Python特点"><a href="#Python特点" class="headerlink" title="Python特点"></a>Python特点</h3><ul><li><strong>1.易于学习：</strong>Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</li><li><strong>2.易于阅读：</strong>Python代码定义的更清晰。</li><li><strong>3.易于维护：</strong>Python的成功在于它的源代码是相当容易维护的。</li><li><strong>4.一个广泛的标准库：</strong>Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。</li><li><strong>5.互动模式：</strong>互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。</li><li><strong>6.可移植：</strong>基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。</li><li><strong>7.可扩展：</strong>如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。</li><li><strong>8.数据库：</strong>Python提供所有主要的商业数据库的接口。</li><li><strong>9.GUI编程：</strong>Python支持GUI可以创建和移植到许多系统调用。</li><li>**10.可嵌入: **你可以将Python嵌入到C/C++程序，让你的程序的用户获得”脚本化”的能力。</li></ul><p><a name="yMneR"></a></p><h3 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h3><ul><li>Web应用</li><li>网络爬虫</li><li>自动化运维（脚本处理）</li><li>科学计算和统计</li><li>人工智能</li><li>大数据（数据清洗）</li><li>……</li></ul><p><br />2020年11月TIOBE编程语言排行榜单<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606722654696-ddb9117f-f890-4ec2-9384-2f589144b65b.png#align=left&display=inline&height=797&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1594&originWidth=1982&size=223335&status=done&style=none&width=991" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606722773045-7eae1273-6e65-4c3d-9400-bb132c25ebec.png#align=left&display=inline&height=445&margin=%5Bobject%20Object%5D&name=image.png&originHeight=890&originWidth=1870&size=173475&status=done&style=none&width=935" alt="image.png"><br /></p><p><a name="NmsPE"></a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>开发环境搭建就是安装Python的解释器<br />Python的解释器分类：</p><ul><li>CPython（官方）：用c语言编写的Python解释器</li><li>PyPy：用Python编写的Python解释器</li><li>IronPython：用.net编写的Python解释器</li><li>Jython：用Java编写的Python解释器</li></ul><p><a name="tyJSy"></a></p><h3 id="（1）下载安装包-python-3-9-0"><a href="#（1）下载安装包-python-3-9-0" class="headerlink" title="（1）下载安装包 python-3.9.0"></a>（1）下载安装包 <a href="https://www.python.org/downloads/">python-3.9.0</a></h3><p>Python最新源码，二进制文档，新闻资讯等可以在Python的官网查看到：<br />Python官网：<a href="https://www.python.org/">https://www.python.org/</a><br />你可以在以下链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等格式的文档。<br />Python文档下载地址：<a href="https://www.python.org/doc/">https://www.python.org/doc/</a><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606728256443-e5e55b8b-069f-4abd-8910-fca1228e1103.png#align=left&display=inline&height=390&margin=%5Bobject%20Object%5D&name=image.png&originHeight=780&originWidth=1744&size=232279&status=done&style=none&width=872" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606728372631-03971185-46d6-44ad-94b2-ddc704d9578b.png#align=left&display=inline&height=193&margin=%5Bobject%20Object%5D&name=image.png&originHeight=386&originWidth=1122&size=41860&status=done&style=none&width=561" alt="image.png"><br><a name="OKcki"></a></p><h3 id="（2）安装：傻瓜式安装"><a href="#（2）安装：傻瓜式安装" class="headerlink" title="（2）安装：傻瓜式安装"></a>（2）安装：傻瓜式安装</h3><p>Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。<br />只需要下载适用于使用平台的二进制代码，然后安装Python即可。<br />windows安装时，勾选<code>Add Python to PATH</code>，则无需手动配置环境变量。<br /><img src="http://oss.diorspo.cn/Fm48e6KBLsh_oV6i0NTxsuMKL2yx" alt="image.png"><br /></p><p><a name="4np29"></a></p><h3 id="（3）确认安装成功"><a href="#（3）确认安装成功" class="headerlink" title="（3）确认安装成功"></a>（3）确认安装成功</h3><p>打开命令行窗口，输入python，出现如下内容：</p><pre><code class="hljs bash">Python 3.7.4 (default, Jul  9 2019, 18:13:23) [Clang 10.0.1 (clang-1001.0.46.4)] on darwinType <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.&gt;&gt;&gt;</code></pre><p><a name="zMgg9"></a></p><h3 id="（4）安装集成开发环境"><a href="#（4）安装集成开发环境" class="headerlink" title="（4）安装集成开发环境"></a>（4）安装集成开发环境</h3><p><a name="pP8Uj"></a></p><h4 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h4><blockquote><p>编写一般脚本时更加快速，方便</p></blockquote><p>VSCode是一款免费开源的现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义热键等特性，支持插件扩展。<br />软件跨平台支持 Win、Mac以及 Linux。<br />通过安装Python相关的扩展插件，能够很好的支持Python的日常开发。<br />下载地址：<a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a><br /><img src="http://oss.diorspo.cn/Fk2sbsPQRZXR_-B4rx8N9KPtdSrV" alt="image.png"><br /></p><p><a name="0mUN2"></a></p><h4 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h4><blockquote><p>编写模块结构较复杂的应用项目时，功能更加强大</p></blockquote><p>PyCharm 是由 JetBrains 打造的一款 Python IDE，支持 macOS、 Windows、 Linux 系统。<br />功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制……<br />下载地址 : <a href="https://www.jetbrains.com/pycharm/download/">https://www.jetbrains.com/pycharm/download/</a><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/614225/1606729307725-e56d3f49-c455-4c52-8a67-ec25c2db085d.png#align=left&display=inline&height=775&margin=%5Bobject%20Object%5D&originHeight=775&originWidth=985&size=0&status=done&style=none&width=985"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go程序设计语言-(一)入门</title>
    <link href="/2020/11/24/Go%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80-(%E4%B8%80)%E5%85%A5%E9%97%A8/"/>
    <url>/2020/11/24/Go%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80-(%E4%B8%80)%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="http://oss.diorspo.cn/fiveyears.jpg" alt="Golang">  </p><h2 id="简单谈谈为啥要学习Golang"><a href="#简单谈谈为啥要学习Golang" class="headerlink" title="简单谈谈为啥要学习Golang"></a>简单谈谈为啥要学习Golang</h2><p>很久之前就听说Golang在业内越来越受欢迎，使用它作为主要开发语言的厂商也逐渐增多，比如字节跳动基本都是Golang开发为主。       </p><p><img src="http://oss.diorspo.cn/QQ20201125-001925%402x.png" alt="2020年10月TIOBE排行"></p><p>2019年4月22日，发生了一件乌龙事件，哔哩哔哩的后端代码被上传到了GitHub（虽然不是新版本），当时凑热闹下载代码看了一眼，小破站的服务端也是使用Golang进行开发，是近两年才进行的重构；另外，今年暑期在阿里云实习期间也发现团队部分项目也根据需要使用了Golang进行开发，而不是一味再拘泥于Java；由此可见，Golang的优良特性吸引了越来越多的开发者投向其怀抱，我平时接触比较多的Docker、Promethus等等开源项目也都是Golang开发。因此，基于趋势和自己的兴趣，利用最后几个月学生生涯去拓展一下技术栈，似乎是不错的选择。  </p><hr><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>略过简单的安装步骤，写一个HelloWorld      </p><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;fmt.Println(<span class="hljs-string">&quot;Hello World&quot;</span>)&#125;</code></pre><p>与可以看，到Java类似，主要还是三个部分，首先是包声明<code>package main</code>，然后导入依赖包<code>import &quot;fmt&quot;</code>，最后是具体代码。值得新手注意的一点是Golang对import的内容有严格的要求，<strong>导入的包必须被使用，否则会编译出错</strong>，这是为了防止程序演化中引用不需要的包～～（还好我已经在写Java的过程中养成了快捷键提出无用包的习惯QAQ）<br><img src="http://oss.diorspo.cn/2.png" alt="无用包编译出错" title="无用包编译出错">     </p><p>Golang中声明为<code>main</code>的包和函数，根据经验可以想到是具有特殊含义的，即程序的入口。  </p><p>函数的声明和Java类似，但似乎更加灵活，以<code>func</code>开头，后面跟函数名，括号中可以放参数列表，返回值支持多个，返回值列表也可为空，如main函数。</p><p>与Java不同，Go不需要以分号结尾，除非有个多个语句或声明出现在同一行。    </p><p>另一个需要值得注意的点，Golang在代码格式上进行了严格的要求，比如在什么地方换行会影响Go代码的解析。例如:  </p><ul><li><code>&#123;</code>必须和关键字<code>func</code>在同一行</li><li>在表达式<code>x+y</code>中，<code>+</code>后面可以有换行，但不能在前面</li></ul><p>为了满足Golang对代码格式的严格要求，go提供了gofmt工具对代码以标准格式重写，可以配置ide自动在保存代码时进行格式化。   </p><p>既然是HelloWorld，也就必不可少的认识一下Go提供的一系列command，在命令行中输入<code>go -h</code>可以看到，一些常用的命令，如<code>run</code>,<code>build</code>,<code>fmt</code>……在开发中可以根据需要使用。</p><pre><code class="hljs bash">Go is a tool <span class="hljs-keyword">for</span> managing Go <span class="hljs-built_in">source</span> code.Usage:        go &lt;<span class="hljs-built_in">command</span>&gt; [arguments]The commands are:        bug         start a bug report        build       compile packages and dependencies        clean       remove object files and cached files        doc         show documentation <span class="hljs-keyword">for</span> package or symbol        env         <span class="hljs-built_in">print</span> Go environment information        fix         update packages to use new APIs        fmt         gofmt (reformat) package sources        generate    generate Go files by processing <span class="hljs-built_in">source</span>        get         add dependencies to current module and install them        install     compile and install packages and dependencies        list        list packages or modules        mod         module maintenance        run         compile and run Go program        <span class="hljs-built_in">test</span>        <span class="hljs-built_in">test</span> packages        tool        run specified go tool        version     <span class="hljs-built_in">print</span> Go version        vet         report likely mistakes <span class="hljs-keyword">in</span> packagesUse <span class="hljs-string">&quot;go help &lt;command&gt;&quot;</span> <span class="hljs-keyword">for</span> more information about a <span class="hljs-built_in">command</span>.Additional <span class="hljs-built_in">help</span> topics:        buildconstraint build constraints        buildmode       build modes        c               calling between Go and C        cache           build and <span class="hljs-built_in">test</span> caching        environment     environment variables        filetype        file types        go.mod          the go.mod file        gopath          GOPATH environment variable        gopath-get      legacy GOPATH go get        goproxy         module proxy protocol        importpath      import path syntax        modules         modules, module versions, and more        module-get      module-aware go get        module-auth     module authentication using go.sum        module-private  module configuration <span class="hljs-keyword">for</span> non-public modules        packages        package lists and patterns        testflag        testing flags        testfunc        testing <span class="hljs-built_in">functions</span>Use <span class="hljs-string">&quot;go help &lt;topic&gt;&quot;</span> <span class="hljs-keyword">for</span> more information about that topic.</code></pre>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020春招暑期实习-总结</title>
    <link href="/2020/04/20/2020%E6%98%A5%E6%8B%9B%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2020/04/20/2020%E6%98%A5%E6%8B%9B%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="2020暑期实习春招"><a href="#2020暑期实习春招" class="headerlink" title="2020暑期实习春招"></a>2020暑期实习春招</h1><p>历时近一个月，紧张刺激的春招终于告一段落。面试一周，等结果半个月，所幸功夫不负有心人，我拿到了心心念念的阿里offer。在尽情浪了两天后还是决定对这次春招找实习的过程进行一次回顾和总结，方便为秋招进一步提高和完善做准备，同时也可以分享给大家做一些参考。   </p><h2 id="一、Offer情况"><a href="#一、Offer情况" class="headerlink" title="一、Offer情况"></a>一、Offer情况</h2><p>我从本科阶段开始一直在学习和参与一些Java Web项目的开发，加上保研结束进入实验室的两年来也都在做Java后端的开发，所以春招投递的岗位自然都是Java开发相关。   </p><p>春招期间我面了三家公司，分别是美团、阿里、腾讯，最终成功收到三家公司的offer，具体如下：  </p><ul><li>美团到家事业群-外卖配送技术部-系统开发岗位-Base北京    </li><li>腾讯云与智慧产业事业群(CSIG)-软件后台开发岗位-Base成都  </li><li>阿里云智能事业群-阿里云-Java研发工程师-Base杭州    </li></ul><p>实习生的Offer待遇方面，公司通常都是根据学历有统一的标准，各大厂的待遇往往也差不多（当然，字节、PDD之流的土豪除外QAQ）。 通常都是</p><p style="text-align:center">薪资福利=（出勤日x工资/天+出勤率x房补/月）</p>具体的大家自己百度即可～   不过相比美团的待遇，腾讯首月会发2000的异地交通补贴还是让我挺意外的。<h2 id="二、春招历程"><a href="#二、春招历程" class="headerlink" title="二、春招历程"></a>二、春招历程</h2><p>根据我的个人经历，我将整个春招的过程可以大致分为如下几个部分：  </p><ul><li><strong>准备阶段</strong>：制作简历，复习知识，整理资料，投递简历    </li><li><strong>进行阶段</strong>：笔试+面试+查漏补缺   </li><li><strong>结果阶段</strong>：漫长的oc等待，与其他公司HR互演（-.-）     </li></ul><p>下面简单介绍一下我在这三个阶段中的一些大概经历和感受，不展开讲细节，详细内容留到后续有空针对每一块写一些经验文章。   </p><h3 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1. 准备阶段"></a>1. 准备阶段</h3><p>对于找工作的准备，我个人的建议是越早越好，提前一个月为佳，这样节奏可以舒适一些（也没必要太早）。针对岗位的知识面覆盖要广，同时对于关键的常问点要有深入的钻研和理解。<br>今年最大的意外，就是没想到遇到疫情这种尴尬情况。<br>这波疫情对各个公司的春招带了不少不确定因素，另外疫情期间实验室也趁热输出了一波业务需求，所以我整个二月和三月初都在给实验室搬砖，没有时间去尽早地开始复习，同时也错过了阿里的提前批。<br>跟我身边同学的情况，如果二月中旬开始复习刷题准备，三月初就可以拿到一些公司的offer，如字节。    </p><h4 id="关于复习"><a href="#关于复习" class="headerlink" title="关于复习"></a>关于复习</h4><p>关于如何复习，复习哪些知识点，还是留到以后的分享，在这里先粗略的讲一下我的复习过程。        </p><p>因为我平时写Java挺多，实验室的项目也一直没停，很多框架和数据库都有用到，基础知识也都有印象，所以我首先看了两本深入的书籍，分别是《深入理解Java虚拟机》（我买的时候第三版还没出，后来发现微信阅读可以看第三版）和《Java并发编程艺术》。先看这两本书的原因是我对Java虚拟机相关知识了解不够多，并发编程平时用的也不是很多，所以认真看了一遍去弥补了知识的空缺。     </p><p>看完两本书之后就开始<strong>系统地</strong>复习各个科目的知识，复习过程中一定要在脑海中形成知识体系，很多知识点是可以串联起来，或者思想可以相互借鉴，这样在面试的过程中往往就是顺着往下问的问题。这里可以推荐一下两个不错的项目<a href="https://cyc2018.github.io/CS-Notes/">CyC2018/CSNotes</a>和<a href="https://snailclimb.gitee.io/javaguide/#/">JavaGuide</a>，两位作者总结的非常系统全面，给了我非常大的帮助，大家可以Star一下。个人偏向先根据CSNotes进行一次全面的复习，然后对于不够深入或者没提到的可以再去JavaGuide完善自己的知识体系，也可以反过来；不过，对于有些知识点，作者没法花大篇幅去深入讲，还是需要我们自己去查找搜集一些资料进一步深入学习。与此同时，我又将那两本书有<strong>针对性地</strong>看了两遍，并且适当地刷了一些leetcode和剑指offer的题目为笔试和面试中的手撕代码做准备。     </p><p>这里对于算法题要多说一些，这两年的情况是各个大厂对于笔试的重视程度的确都有不小的提高，华为面试也开始撕代码了，阿里以前是内推可以免笔试的，但是今年必须笔试，笔试成绩差可能就不约面试或者面试流程中还要加笔试面。所以我觉得多刷点题目总归是好的，我在大三结束保研成功后，基本没有再去接触过算法相关的东西，所以做阿里笔试就发挥的不是很好，中间又加了一面笔试，还好最后阿里抬了一手，给了offer。所以朋友们多刷点题吧，尤其笔试面试中常见的类型，刷题主要针对简单题和中等题即可，难度不用超过Leetcode中等题，因为据说Hard难度的题目面试官可能也不会😂。    </p><h4 id="投递简历"><a href="#投递简历" class="headerlink" title="投递简历"></a>投递简历</h4><p>简历制作的过程比较痛苦，改了很多次，也请教了学长学姐。简历既不能太空，也不能花里胡哨；哪些内容该写，哪些不该写，都要仔细斟酌，不然都会给自己埋下坑。关于简历制作我准备后面和其他同学讨论总结一波，写一篇专门的文章来讲讲，希望可以给大家秋招一些帮助。    </p><p>在投递简历时，我投递了美团的基础研发平台(Base上海)，不过被北京的外卖配送技术团队截胡捞了，美团也是我最早收到的面试。当时对找工作的面试没有一点经验，出于强烈的求生欲，就没有拒绝面试重新进池子（毕竟北京和上海又能有多少区别呢，还有就是部门还挺核心的^_^）；   </p><p>腾讯我投递了上海，由于腾讯大多数业务都是写C++比较多，我对这方面不了解，也就没有选择意向事业群，最后是被腾讯云数据库产品团队捞起来，Base在成都。这里由于个人对成都这个城市还挺有好感（爱吃辣的我没法拒绝），同时对云计算业务的前景比较看好（个人是阿里云和腾讯云的深度用户），所以也就欣然接受了面试。    </p><p>至于阿里，可以说是我的第一志愿，当时最感兴趣的是蚂蚁金服和阿里云，由于错过了提前批，所以只有一次机会，咨询了实验室的学长学姐并且再三考虑后，决定选择阿里云投递，并且通过一个靠谱的学长内推到他们部门。      </p><p>在这里需要强调一下内推的重要性，熟人内推最大的好处之一就是方便地查询流程和进度，另外可以详细了解部门的业务和情况。不过美团的内推好像没啥用，腾讯的状态在校招官网上比较清楚，也可以加群让HR帮查。因为我投阿里是有靠谱学长内推，所以每一面之后都可以方便地了解到状态，有时还可以聊一下一些面试的小反馈，这些信息我觉得挺关键。         </p><h3 id="2-进行阶段"><a href="#2-进行阶段" class="headerlink" title="2. 进行阶段"></a>2. 进行阶段</h3><p>各个大厂的校招流程基本都大同小异，总结一下可以氛围以下步骤：   </p><ul><li><p>测评：性格测试，主要考察个人性格，团队协作能力，领导能力，乐观悲观，创新型/保守型…… 题目通常都是选择题，不涉及技术或专业知识。很多人可能不重视，但是的确会有公司因为性格测试直接挂掉同学，比如华为～    </p></li><li><p>笔试：客观题(选择题)+问答题+编程算法题，其中客观题和问答题只有部分公司的笔试会有，大多数公司的笔试都是直接2-4道算法题，笔试非常重要，关系着能否收到面试或者是后续的评价。   </p></li><li><p>面试：通常是技术面+HR面，技术面会有多轮，不同公司，不同部门都有区别，就我的经历如下：  </p><ul><li>阿里：3轮技术面+1轮交叉技术面+HR面，阿里往往第2轮或第3轮会是团队leader面，我当时情况特殊，第一面就是团队leader   </li><li>腾讯：2轮技术面+HR面，腾讯第二轮是主管面。   </li><li>美团：3轮技术面，一面是个年轻老哥，二面是团队leader，三面是部门主管。美团没有HR面，三面结束后，HR就打电话来问了一些信息，就给了offer；另外美团有的部门是2面，有的是3面，具体哪些部门区别我就不清楚了。      </li></ul></li></ul><p>根据我自己的面试体验，以及和基友的讨论，不同公司的面试风格和侧重点都是不同的。个人感觉阿里比较看重项目经验，有项目的话，会根据项目聊挺多的，因为每一面都是有记录的，往往一面会问基础知识比较多，后面几面就比较会问一些场景题，或者就聊项目里的一些<strong>“重点”</strong>，并且拓展开一些问题。字节跳动就三面问项目都比较少，而且每一面都会撕代码，有时候面试表现差一些，如果代码撕地好，也可以拉回来，对于刷题党是福音。而我面的另外两家，腾讯一面问了一堆知识，二面纯聊项目；美团一二面问知识，三面聊项目。所以大家准备面试的时候还是要准备一下自己的项目，至于怎么准备，如何去把项目讲好也是一门学问了。     </p><p>技术面试和HR面也不一样，HR都是人精，会从你的只言片语中判断你的性格、品质、优缺点，从而判断你是否适合这个公司，适合这个岗位。很多人觉得到了HR面就稳了，实际上很多公司的HR都有一票否决权，发不发offer，往往在HR一念之间，所以HR面也是需要做一些准备的。   </p><h3 id="3-结果阶段"><a href="#3-结果阶段" class="headerlink" title="3. 结果阶段"></a>3. 结果阶段</h3><p>结果的等待是漫长而煎熬的，我从3.23开始投递简历，一周面完了三家公司的技术面，除了美团4.1发的offer，腾讯和阿里都是到前两天才收到意向书，这个过程中很慌，同时也因为很累导致不想再面别家，虽然做了一些公司的笔试，最近因为收到了阿里腾讯的offer，我也拒绝了后续的面试。   </p><p>等结果通常会有三种消息：   </p><ul><li>感谢信：感谢您投递，综合考虑您不适合…… 其实就是发好人卡了，凉了   </li><li>offer call：HR打来电话告知面试通过，给口头offer   </li><li>意向书：通常都是邮件收到意向书，这时候才能算尘埃落定</li></ul><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>暑期实习基本都是有转正机会，如果能进入心仪的公司实习，并且顺利通过转正答辩，毕业的工作就有了保障。秋招就不会有什么压力，面试别家也有argue的资本。<br>对于我们学生来说，毕业的工作就决定了我们未来发展的起点，可能就是改变人生的选择，因此找一份好的工作真的很重要，准备地再充分都不为过。这两年因为各种原因，个人感觉IT行业的整体招聘难度变大，竞争愈发激烈，希望我们每个人都能通过自己的努力，斩获满意的offer吧！   </p>]]></content>
    
    
    
    <tags>
      
      <tag>实习面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
